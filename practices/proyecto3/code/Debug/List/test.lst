
AVRASM ver. 2.1.30  D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm Sat May 11 21:53:50 2019

D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1093): warning: Register r4 already defined by the .DEF directive
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1094): warning: Register r5 already defined by the .DEF directive
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1095): warning: Register r6 already defined by the .DEF directive
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1096): warning: Register r7 already defined by the .DEF directive
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1097): warning: Register r8 already defined by the .DEF directive
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1098): warning: Register r9 already defined by the .DEF directive
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1099): warning: Register r10 already defined by the .DEF directive
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1100): warning: Register r11 already defined by the .DEF directive
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1101): warning: Register r12 already defined by the .DEF directive
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1102): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.34 Evaluation
                 ;(C) Copyright 1998-2018 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _puntaje_p1=R4
                 	.DEF _puntaje_p1_msb=R5
                 	.DEF _puntaje_p2=R6
                 	.DEF _puntaje_p2_msb=R7
                 	.DEF _fila=R8
                 	.DEF _fila_msb=R9
                 	.DEF _col=R10
                 	.DEF _col_msb=R11
                 	.DEF _bf=R12
                 	.DEF _bf_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c050      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 _tbl10_G101:
000015 2710
000016 03e8
000017 0064
000018 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000019 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00001a 1000
00001b 0100
00001c 0010
00001d 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001e 0000
00001f 0000      	.DB  0x0,0x0,0x0,0x0
000020 0002
000021 0002      	.DB  0x2,0x0,0x2,0x0
000022 0000      	.DB  0x0,0x0
                 
                 _0x3:
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1146): warning: .cseg .db misalignment - padding zero byte
000023 0001      	.DB  0x1
                 _0x4:
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1148): warning: .cseg .db misalignment - padding zero byte
000024 0002      	.DB  0x2
                 _0x5:
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1150): warning: .cseg .db misalignment - padding zero byte
000025 0010      	.DB  0x10
                 _0x6:
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1152): warning: .cseg .db misalignment - padding zero byte
000026 0008      	.DB  0x8
                 _0x7:
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1154): warning: .cseg .db misalignment - padding zero byte
000027 0001      	.DB  0x1
                 _0x8:
D:\Escritorio\MCS\practices\proyecto3\test\Debug\List\test.asm(1156): warning: .cseg .db misalignment - padding zero byte
000028 0040      	.DB  0x40
                 _0x0:
000029 6c50
00002a 7961
00002b 7265
00002c 3120      	.DB  0x50,0x6C,0x61,0x79,0x65,0x72,0x20,0x31
00002d 203a
00002e 2520
00002f 0064
000030 6c50      	.DB  0x3A,0x20,0x20,0x25,0x64,0x0,0x50,0x6C
000031 7961
000032 7265
000033 3220
000034 203a      	.DB  0x61,0x79,0x65,0x72,0x20,0x32,0x3A,0x20
000035 2520
000036 0064      	.DB  0x20,0x25,0x64,0x0
                 _0x2000003:
000037 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000038 000a      	.DW  0x0A
000039 0004      	.DW  0x04
00003a 003c      	.DW  __REG_VARS*2
                 
00003b 0001      	.DW  0x01
00003c 00e2      	.DW  _j1c1
00003d 0046      	.DW  _0x3*2
                 
00003e 0001      	.DW  0x01
00003f 00e4      	.DW  _j1c2
000040 0048      	.DW  _0x4*2
                 
000041 0001      	.DW  0x01
000042 00e6      	.DW  _j2c1
000043 004a      	.DW  _0x5*2
                 
000044 0001      	.DW  0x01
000045 00e8      	.DW  _j2c2
000046 004c      	.DW  _0x6*2
                 
000047 0001      	.DW  0x01
000048 00ea      	.DW  _filj1
000049 004e      	.DW  _0x7*2
                 
00004a 0001      	.DW  0x01
00004b 00ec      	.DW  _filj2
00004c 0050      	.DW  _0x8*2
                 
00004d 0002      	.DW  0x02
00004e 0100      	.DW  __base_y_G100
00004f 006e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000050 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000051 94f8      	CLI
000052 27ee      	CLR  R30
000053 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000054 e0f1      	LDI  R31,1
000055 bffb      	OUT  GICR,R31
000056 bfeb      	OUT  GICR,R30
000057 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000058 e08d      	LDI  R24,(14-2)+1
000059 e0a2      	LDI  R26,2
00005a 27bb      	CLR  R27
                 __CLEAR_REG:
00005b 93ed      	ST   X+,R30
00005c 958a      	DEC  R24
00005d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005f e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000060 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000061 93ed      	ST   X+,R30
000062 9701      	SBIW R24,1
000063 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000064 e7e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000065 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000066 9185      	LPM  R24,Z+
000067 9195      	LPM  R25,Z+
000068 9700      	SBIW R24,0
000069 f061      	BREQ __GLOBAL_INI_END
00006a 91a5      	LPM  R26,Z+
00006b 91b5      	LPM  R27,Z+
00006c 9005      	LPM  R0,Z+
00006d 9015      	LPM  R1,Z+
00006e 01bf      	MOVW R22,R30
00006f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000070 9005      	LPM  R0,Z+
000071 920d      	ST   X+,R0
000072 9701      	SBIW R24,1
000073 f7e1      	BRNE __GLOBAL_INI_LOOP
000074 01fb      	MOVW R30,R22
000075 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000076 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000077 bfed      	OUT  SPL,R30
000078 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000079 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007a eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007b e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007c c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 ;#include <mega8535.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;
                 ;void validar_derecha_jugador1(void);
                 ;void validar_izquierda_jugador1(void);
                 ;void validar_derecha_jugador2(void);
                 ;void validar_izquierda_jugador2(void);
                 ;void cambiar_columna(void);
                 ;void valida(void);
                 ;void fila_cambio(void);
                 ;void mostrar_puntaje(void);
                 ;
                 ;int puntaje_p1 =0;
                 ;int puntaje_p2=0;
                 ;int fila = 2;
                 ;int col = 2;
                 ;int bf = 0;
                 ;int bc = 0;
                 ;int j1c1 = 1;
                 
                 	.DSEG
                 ;int j1c2 = 2;
                 ;int j2c1 = 16;
                 ;int j2c2 = 8;
                 ;int filj1 = 1;
                 ;int filj2 = 64;
                 ;int contador = 0;
                 ;int bdaj1;
                 ;int bdpj1;
                 ;int biaj1;
                 ;int bipj1;
                 ;int bdaj2;
                 ;int bdpj2;
                 ;int biaj2;
                 ;int bipj2;
                 ;
                 ;void main(void)
                 ; 0000 0026 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0027     DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
00007d efef      	LDI  R30,LOW(255)
00007e bbea      	OUT  0x1A,R30
                 ; 0000 0028     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00007f e0e0      	LDI  R30,LOW(0)
000080 bbeb      	OUT  0x1B,R30
                 ; 0000 0029     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000081 bbe7      	OUT  0x17,R30
                 ; 0000 002A     PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000082 efef      	LDI  R30,LOW(255)
000083 bbe8      	OUT  0x18,R30
                 ; 0000 002B     DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000084 bbe4      	OUT  0x14,R30
                 ; 0000 002C     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000085 e0e0      	LDI  R30,LOW(0)
000086 bbe5      	OUT  0x15,R30
                 ; 0000 002D     DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000087 efef      	LDI  R30,LOW(255)
000088 bbe1      	OUT  0x11,R30
                 ; 0000 002E     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000089 e0e0      	LDI  R30,LOW(0)
00008a bbe2      	OUT  0x12,R30
                 ; 0000 002F     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00008b bfe3      	OUT  0x33,R30
                 ; 0000 0030     TCNT0=0x00;
00008c bfe2      	OUT  0x32,R30
                 ; 0000 0031     OCR0=0x00;
00008d bfec      	OUT  0x3C,R30
                 ; 0000 0032     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00008e bdef      	OUT  0x2F,R30
                 ; 0000 0033     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00008f bdee      	OUT  0x2E,R30
                 ; 0000 0034     TCNT1H=0x00;
000090 bded      	OUT  0x2D,R30
                 ; 0000 0035     TCNT1L=0x00;
000091 bdec      	OUT  0x2C,R30
                 ; 0000 0036     ICR1H=0x00;
000092 bde7      	OUT  0x27,R30
                 ; 0000 0037     ICR1L=0x00;
000093 bde6      	OUT  0x26,R30
                 ; 0000 0038     OCR1AH=0x00;
000094 bdeb      	OUT  0x2B,R30
                 ; 0000 0039     OCR1AL=0x00;
000095 bdea      	OUT  0x2A,R30
                 ; 0000 003A     OCR1BH=0x00;
000096 bde9      	OUT  0x29,R30
                 ; 0000 003B     OCR1BL=0x00;
000097 bde8      	OUT  0x28,R30
                 ; 0000 003C     ASSR=0<<AS2;
000098 bde2      	OUT  0x22,R30
                 ; 0000 003D     TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000099 bde5      	OUT  0x25,R30
                 ; 0000 003E     TCNT2=0x00;
00009a bde4      	OUT  0x24,R30
                 ; 0000 003F     OCR2=0x00;
00009b bde3      	OUT  0x23,R30
                 ; 0000 0040     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00009c bfe9      	OUT  0x39,R30
                 ; 0000 0041     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00009d bfe5      	OUT  0x35,R30
                 ; 0000 0042     MCUCSR=(0<<ISC2);
00009e bfe4      	OUT  0x34,R30
                 ; 0000 0043     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00009f b9ea      	OUT  0xA,R30
                 ; 0000 0044     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000a0 e8e0      	LDI  R30,LOW(128)
0000a1 b9e8      	OUT  0x8,R30
                 ; 0000 0045     SFIOR=(0<<ACME);
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 bfe0      	OUT  0x30,R30
                 ; 0000 0046     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000a4 b9e6      	OUT  0x6,R30
                 ; 0000 0047     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000a5 b9ed      	OUT  0xD,R30
                 ; 0000 0048     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000a6 bfe6      	OUT  0x36,R30
                 ; 0000 0049 
                 ; 0000 004A     // Alphanumeric LCD initialization
                 ; 0000 004B     // Connections are specified in the
                 ; 0000 004C     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 004D     // RS - PORTA Bit 0
                 ; 0000 004E     // RD - PORTA Bit 1
                 ; 0000 004F     // EN - PORTA Bit 2
                 ; 0000 0050     // D4 - PORTA Bit 3
                 ; 0000 0051     // D5 - PORTA Bit 4
                 ; 0000 0052     // D6 - PORTA Bit 5
                 ; 0000 0053     // D7 - PORTA Bit 6
                 ; 0000 0054     // Characters/line: 16
                 ; 0000 0055     lcd_init(12);
0000a7 e0ac      	LDI  R26,LOW(12)
0000a8 d1cc      	RCALL _lcd_init
                 ; 0000 0056     while (1)
                 _0x9:
                 ; 0000 0057     {
                 ; 0000 0058         mostrar_puntaje();
0000a9 d153      	RCALL _mostrar_puntaje
                 ; 0000 0059         validar_derecha_jugador1();
0000aa d075      	RCALL _validar_derecha_jugador1
                 ; 0000 005A         validar_izquierda_jugador1();
0000ab d09d      	RCALL _validar_izquierda_jugador1
                 ; 0000 005B         validar_derecha_jugador2();
0000ac d0ef      	RCALL _validar_derecha_jugador2
                 ; 0000 005C         validar_izquierda_jugador2();
0000ad d0c5      	RCALL _validar_izquierda_jugador2
                 ; 0000 005D         PORTD=~fila;
0000ae 2de8      	MOV  R30,R8
0000af d352      	RCALL SUBOPT_0x0
                 ; 0000 005E         PORTC=col;
0000b0 baa5      	OUT  0x15,R10
                 ; 0000 005F         delay_ms (5);
0000b1 d353      	RCALL SUBOPT_0x1
                 ; 0000 0060         PORTC = j1c1;
0000b2 91e0 00e2 	LDS  R30,_j1c1
0000b4 d353      	RCALL SUBOPT_0x2
                 ; 0000 0061         PORTD = ~filj1;
                 ; 0000 0062         delay_ms(5);
0000b5 d34f      	RCALL SUBOPT_0x1
                 ; 0000 0063         PORTC = j1c2;
0000b6 91e0 00e4 	LDS  R30,_j1c2
0000b8 d34f      	RCALL SUBOPT_0x2
                 ; 0000 0064         PORTD = ~filj1;
                 ; 0000 0065         delay_ms(5);
0000b9 d34b      	RCALL SUBOPT_0x1
                 ; 0000 0066         PORTC = j2c1;
0000ba 91e0 00e6 	LDS  R30,_j2c1
0000bc d34f      	RCALL SUBOPT_0x3
                 ; 0000 0067         PORTD = ~filj2;
                 ; 0000 0068         delay_ms(5);
0000bd d347      	RCALL SUBOPT_0x1
                 ; 0000 0069         PORTC = j2c2;
0000be 91e0 00e8 	LDS  R30,_j2c2
0000c0 d34b      	RCALL SUBOPT_0x3
                 ; 0000 006A         PORTD = ~filj2;
                 ; 0000 006B         delay_ms(5);
0000c1 d343      	RCALL SUBOPT_0x1
                 ; 0000 006C         contador++;
0000c2 eeae      	LDI  R26,LOW(_contador)
0000c3 e0b0      	LDI  R27,HIGH(_contador)
0000c4 d34b      	RCALL SUBOPT_0x4
0000c5 9631      	ADIW R30,1
0000c6 93fe      	ST   -X,R31
0000c7 93ee      	ST   -X,R30
                 ; 0000 006D         if(contador==20)
0000c8 91a0 00ee 	LDS  R26,_contador
0000ca 91b0 00ef 	LDS  R27,_contador+1
0000cc 9754      	SBIW R26,20
0000cd f441      	BRNE _0xC
                 ; 0000 006E         {
                 ; 0000 006F           fila_cambio();
0000ce d009      	RCALL _fila_cambio
                 ; 0000 0070           cambiar_columna();
0000cf d026      	RCALL _cambiar_columna
                 ; 0000 0071           contador = 0;
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 93e0 00ee 	STS  _contador,R30
0000d3 93e0 00ef 	STS  _contador+1,R30
                 ; 0000 0072           valida();
0000d5 d0f3      	RCALL _valida
                 ; 0000 0073         }
                 ; 0000 0074       }
                 _0xC:
0000d6 cfd2      	RJMP _0x9
                 ; 0000 0075     }
                 _0xD:
0000d7 cfff      	RJMP _0xD
                 ; .FEND
                 ;
                 ;
                 ;void fila_cambio()
                 ; 0000 0079 {
                 _fila_cambio:
                 ; .FSTART _fila_cambio
                 ; 0000 007A     if(bf==0)
0000d8 2c0c      	MOV  R0,R12
0000d9 280d      	OR   R0,R13
0000da f451      	BRNE _0xE
                 ; 0000 007B     {
                 ; 0000 007C         if(fila<32)
0000db e2e0      	LDI  R30,LOW(32)
0000dc e0f0      	LDI  R31,HIGH(32)
0000dd 168e      	CP   R8,R30
0000de 069f      	CPC  R9,R31
0000df f41c      	BRGE _0xF
                 ; 0000 007D             fila = fila*2;
0000e0 0c88      	LSL  R8
0000e1 1c99      	ROL  R9
                 ; 0000 007E         else
0000e2 c002      	RJMP _0x10
                 _0xF:
                 ; 0000 007F         {
                 ; 0000 0080             bf=1;
0000e3 d32f      	RCALL SUBOPT_0x5
0000e4 016f      	MOVW R12,R30
                 ; 0000 0081         }
                 _0x10:
                 ; 0000 0082     }
                 ; 0000 0083 
                 ; 0000 0084     if(bf==1)
                 _0xE:
0000e5 d32d      	RCALL SUBOPT_0x5
0000e6 15ec      	CP   R30,R12
0000e7 05fd      	CPC  R31,R13
0000e8 f461      	BRNE _0x11
                 ; 0000 0085     {
                 ; 0000 0086         if(fila>2)
0000e9 d32c      	RCALL SUBOPT_0x6
0000ea 15e8      	CP   R30,R8
0000eb 05f9      	CPC  R31,R9
0000ec f424      	BRGE _0x12
                 ; 0000 0087             fila=fila/2;
0000ed 01d4      	MOVW R26,R8
0000ee d32a      	RCALL SUBOPT_0x7
0000ef 014f      	MOVW R8,R30
                 ; 0000 0088         else
0000f0 c004      	RJMP _0x13
                 _0x12:
                 ; 0000 0089         {
                 ; 0000 008A             bf=0;
0000f1 24cc      	CLR  R12
0000f2 24dd      	CLR  R13
                 ; 0000 008B             fila*=2;
0000f3 0c88      	LSL  R8
0000f4 1c99      	ROL  R9
                 ; 0000 008C         }
                 _0x13:
                 ; 0000 008D     }
                 ; 0000 008E }
                 _0x11:
0000f5 9508      	RET
                 ; .FEND
                 ;
                 ;void cambiar_columna()
                 ; 0000 0091 {
                 _cambiar_columna:
                 ; .FSTART _cambiar_columna
                 ; 0000 0092     if(bc==0)
0000f6 91e0 00e0 	LDS  R30,_bc
0000f8 91f0 00e1 	LDS  R31,_bc+1
0000fa 9730      	SBIW R30,0
0000fb f481      	BRNE _0x14
                 ; 0000 0093     {
                 ; 0000 0094         if(col<16)
0000fc e1e0      	LDI  R30,LOW(16)
0000fd e0f0      	LDI  R31,HIGH(16)
0000fe 16ae      	CP   R10,R30
0000ff 06bf      	CPC  R11,R31
000100 f41c      	BRGE _0x15
                 ; 0000 0095             col = col*2;
000101 0caa      	LSL  R10
000102 1cbb      	ROL  R11
                 ; 0000 0096         else
000103 c008      	RJMP _0x16
                 _0x15:
                 ; 0000 0097         {
                 ; 0000 0098             bc=1;
000104 d30e      	RCALL SUBOPT_0x5
000105 93e0 00e0 	STS  _bc,R30
000107 93f0 00e1 	STS  _bc+1,R31
                 ; 0000 0099             col/=2;
000109 01d5      	MOVW R26,R10
00010a d30e      	RCALL SUBOPT_0x7
00010b 015f      	MOVW R10,R30
                 ; 0000 009A         }
                 _0x16:
                 ; 0000 009B     }
                 ; 0000 009C 
                 ; 0000 009D     if(bf==1)
                 _0x14:
00010c d306      	RCALL SUBOPT_0x5
00010d 15ec      	CP   R30,R12
00010e 05fd      	CPC  R31,R13
00010f f479      	BRNE _0x17
                 ; 0000 009E     {
                 ; 0000 009F         if(col>1)
000110 d302      	RCALL SUBOPT_0x5
000111 15ea      	CP   R30,R10
000112 05fb      	CPC  R31,R11
000113 f424      	BRGE _0x18
                 ; 0000 00A0             col=col/2;
000114 01d5      	MOVW R26,R10
000115 d303      	RCALL SUBOPT_0x7
000116 015f      	MOVW R10,R30
                 ; 0000 00A1         else
000117 c007      	RJMP _0x19
                 _0x18:
                 ; 0000 00A2         {
                 ; 0000 00A3             bc=0;
000118 e0e0      	LDI  R30,LOW(0)
000119 93e0 00e0 	STS  _bc,R30
00011b 93e0 00e1 	STS  _bc+1,R30
                 ; 0000 00A4             col*=2;
00011d 0caa      	LSL  R10
00011e 1cbb      	ROL  R11
                 ; 0000 00A5         }
                 _0x19:
                 ; 0000 00A6     }
                 ; 0000 00A7 }
                 _0x17:
00011f 9508      	RET
                 ; .FEND
                 ;
                 ;void validar_derecha_jugador1()
                 ; 0000 00AA {
                 _validar_derecha_jugador1:
                 ; .FSTART _validar_derecha_jugador1
                 ; 0000 00AB     if (PINB.0==0)
000120 99b0      	SBIC 0x16,0
000121 c006      	RJMP _0x1A
                 ; 0000 00AC         bdaj1=0;
000122 e0e0      	LDI  R30,LOW(0)
000123 93e0 00f0 	STS  _bdaj1,R30
000125 93e0 00f1 	STS  _bdaj1+1,R30
                 ; 0000 00AD     else
000127 c005      	RJMP _0x1B
                 _0x1A:
                 ; 0000 00AE         bdaj1=1;
000128 d2ea      	RCALL SUBOPT_0x5
000129 93e0 00f0 	STS  _bdaj1,R30
00012b 93f0 00f1 	STS  _bdaj1+1,R31
                 ; 0000 00AF     if ((bdaj1==0)&&(bdpj1==1)) //hubo cambio de flanco de 1 a 0
                 _0x1B:
00012d 91a0 00f0 	LDS  R26,_bdaj1
00012f 91b0 00f1 	LDS  R27,_bdaj1+1
000131 9710      	SBIW R26,0
000132 f431      	BRNE _0x1D
000133 91a0 00f2 	LDS  R26,_bdpj1
000135 91b0 00f3 	LDS  R27,_bdpj1+1
000137 9711      	SBIW R26,1
000138 f009      	BREQ _0x1E
                 _0x1D:
000139 c006      	RJMP _0x1C
                 _0x1E:
                 ; 0000 00B0     {
                 ; 0000 00B1         if(j1c1<8)
00013a d2e1      	RCALL SUBOPT_0x8
00013b 9718      	SBIW R26,8
00013c f41c      	BRGE _0x1F
                 ; 0000 00B2         {
                 ; 0000 00B3             j1c1*=2;
00013d d2e3      	RCALL SUBOPT_0x9
00013e d2e9      	RCALL SUBOPT_0xA
                 ; 0000 00B4             j1c2=j1c1*2;
00013f d2ed      	RCALL SUBOPT_0xB
                 ; 0000 00B5         }
                 ; 0000 00B6     }
                 _0x1F:
                 ; 0000 00B7     bdpj1 = bdaj1;
                 _0x1C:
000140 91e0 00f0 	LDS  R30,_bdaj1
000142 91f0 00f1 	LDS  R31,_bdaj1+1
000144 93e0 00f2 	STS  _bdpj1,R30
000146 93f0 00f3 	STS  _bdpj1+1,R31
                 ; 0000 00B8 }
000148 9508      	RET
                 ; .FEND
                 ;
                 ;void validar_izquierda_jugador1()
                 ; 0000 00BB {
                 _validar_izquierda_jugador1:
                 ; .FSTART _validar_izquierda_jugador1
                 ; 0000 00BC      if (PINB.1==0)
000149 99b1      	SBIC 0x16,1
00014a c006      	RJMP _0x20
                 ; 0000 00BD         biaj1=0;
00014b e0e0      	LDI  R30,LOW(0)
00014c 93e0 00f4 	STS  _biaj1,R30
00014e 93e0 00f5 	STS  _biaj1+1,R30
                 ; 0000 00BE      else
000150 c005      	RJMP _0x21
                 _0x20:
                 ; 0000 00BF         biaj1=1;
000151 d2c1      	RCALL SUBOPT_0x5
000152 93e0 00f4 	STS  _biaj1,R30
000154 93f0 00f5 	STS  _biaj1+1,R31
                 ; 0000 00C0         if ((biaj1==0)&&(bipj1==1)) //hubo cambio de flanco de 1 a 0
                 _0x21:
000156 91a0 00f4 	LDS  R26,_biaj1
000158 91b0 00f5 	LDS  R27,_biaj1+1
00015a 9710      	SBIW R26,0
00015b f431      	BRNE _0x23
00015c 91a0 00f6 	LDS  R26,_bipj1
00015e 91b0 00f7 	LDS  R27,_bipj1+1
000160 9711      	SBIW R26,1
000161 f009      	BREQ _0x24
                 _0x23:
000162 c007      	RJMP _0x22
                 _0x24:
                 ; 0000 00C1         {
                 ; 0000 00C2             if(j1c1>1)
000163 d2b8      	RCALL SUBOPT_0x8
000164 9712      	SBIW R26,2
000165 f024      	BRLT _0x25
                 ; 0000 00C3             {
                 ; 0000 00C4                 j1c1/=2;
000166 d2b5      	RCALL SUBOPT_0x8
000167 d2b1      	RCALL SUBOPT_0x7
000168 d2bf      	RCALL SUBOPT_0xA
                 ; 0000 00C5                 j1c2=j1c1*2;
000169 d2c3      	RCALL SUBOPT_0xB
                 ; 0000 00C6 
                 ; 0000 00C7             }
                 ; 0000 00C8         }
                 _0x25:
                 ; 0000 00C9        bipj1 = biaj1;
                 _0x22:
00016a 91e0 00f4 	LDS  R30,_biaj1
00016c 91f0 00f5 	LDS  R31,_biaj1+1
00016e 93e0 00f6 	STS  _bipj1,R30
000170 93f0 00f7 	STS  _bipj1+1,R31
                 ; 0000 00CA }
000172 9508      	RET
                 ; .FEND
                 ;
                 ;void validar_izquierda_jugador2()
                 ; 0000 00CD {
                 _validar_izquierda_jugador2:
                 ; .FSTART _validar_izquierda_jugador2
                 ; 0000 00CE     if (PINB.2==0)
000173 99b2      	SBIC 0x16,2
000174 c006      	RJMP _0x26
                 ; 0000 00CF         biaj2=0;
000175 e0e0      	LDI  R30,LOW(0)
000176 93e0 00fc 	STS  _biaj2,R30
000178 93e0 00fd 	STS  _biaj2+1,R30
                 ; 0000 00D0     else
00017a c005      	RJMP _0x27
                 _0x26:
                 ; 0000 00D1         biaj2=1;
00017b d297      	RCALL SUBOPT_0x5
00017c 93e0 00fc 	STS  _biaj2,R30
00017e 93f0 00fd 	STS  _biaj2+1,R31
                 ; 0000 00D2     if ((biaj2==0)&&(bipj2==1)) //hubo cambio de flanco de 1 a 0
                 _0x27:
000180 91a0 00fc 	LDS  R26,_biaj2
000182 91b0 00fd 	LDS  R27,_biaj2+1
000184 9710      	SBIW R26,0
000185 f431      	BRNE _0x29
000186 91a0 00fe 	LDS  R26,_bipj2
000188 91b0 00ff 	LDS  R27,_bipj2+1
00018a 9711      	SBIW R26,1
00018b f009      	BREQ _0x2A
                 _0x29:
00018c c006      	RJMP _0x28
                 _0x2A:
                 ; 0000 00D3     {
                 ; 0000 00D4         if(j2c1>1)
00018d d2a4      	RCALL SUBOPT_0xC
00018e 9712      	SBIW R26,2
00018f f01c      	BRLT _0x2B
                 ; 0000 00D5         {
                 ; 0000 00D6             j2c1/=2;
000190 d2a1      	RCALL SUBOPT_0xC
000191 d287      	RCALL SUBOPT_0x7
000192 d2a4      	RCALL SUBOPT_0xD
                 ; 0000 00D7             j2c2=j2c1*2;
                 ; 0000 00D8         }
                 ; 0000 00D9     }
                 _0x2B:
                 ; 0000 00DA     bipj2 = biaj2;
                 _0x28:
000193 91e0 00fc 	LDS  R30,_biaj2
000195 91f0 00fd 	LDS  R31,_biaj2+1
000197 93e0 00fe 	STS  _bipj2,R30
000199 93f0 00ff 	STS  _bipj2+1,R31
                 ; 0000 00DB }
00019b 9508      	RET
                 ; .FEND
                 ;
                 ;void validar_derecha_jugador2()
                 ; 0000 00DE {
                 _validar_derecha_jugador2:
                 ; .FSTART _validar_derecha_jugador2
                 ; 0000 00DF 
                 ; 0000 00E0     if (PINB.3==0)
00019c 99b3      	SBIC 0x16,3
00019d c006      	RJMP _0x2C
                 ; 0000 00E1         bdaj2=0;
00019e e0e0      	LDI  R30,LOW(0)
00019f 93e0 00f8 	STS  _bdaj2,R30
0001a1 93e0 00f9 	STS  _bdaj2+1,R30
                 ; 0000 00E2     else
0001a3 c005      	RJMP _0x2D
                 _0x2C:
                 ; 0000 00E3         bdaj2=1;
0001a4 d26e      	RCALL SUBOPT_0x5
0001a5 93e0 00f8 	STS  _bdaj2,R30
0001a7 93f0 00f9 	STS  _bdaj2+1,R31
                 ; 0000 00E4     if ((bdaj2==0)&&(bdpj2==1)) //hubo cambio de flanco de 1 a 0
                 _0x2D:
0001a9 91a0 00f8 	LDS  R26,_bdaj2
0001ab 91b0 00f9 	LDS  R27,_bdaj2+1
0001ad 9710      	SBIW R26,0
0001ae f431      	BRNE _0x2F
0001af 91a0 00fa 	LDS  R26,_bdpj2
0001b1 91b0 00fb 	LDS  R27,_bdpj2+1
0001b3 9711      	SBIW R26,1
0001b4 f009      	BREQ _0x30
                 _0x2F:
0001b5 c00a      	RJMP _0x2E
                 _0x30:
                 ; 0000 00E5     {
                 ; 0000 00E6         if(j2c1<8)
0001b6 d27b      	RCALL SUBOPT_0xC
0001b7 9718      	SBIW R26,8
0001b8 f43c      	BRGE _0x31
                 ; 0000 00E7         {
                 ; 0000 00E8             j2c1*=2;
0001b9 91e0 00e6 	LDS  R30,_j2c1
0001bb 91f0 00e7 	LDS  R31,_j2c1+1
0001bd 0fee      	LSL  R30
0001be 1fff      	ROL  R31
0001bf d277      	RCALL SUBOPT_0xD
                 ; 0000 00E9             j2c2=j2c1*2;
                 ; 0000 00EA         }
                 ; 0000 00EB     }
                 _0x31:
                 ; 0000 00EC    bdpj2 = bdaj2;
                 _0x2E:
0001c0 91e0 00f8 	LDS  R30,_bdaj2
0001c2 91f0 00f9 	LDS  R31,_bdaj2+1
0001c4 93e0 00fa 	STS  _bdpj2,R30
0001c6 93f0 00fb 	STS  _bdpj2+1,R31
                 ; 0000 00ED }
0001c8 9508      	RET
                 ; .FEND
                 ;
                 ;void valida()
                 ; 0000 00F0 {
                 _valida:
                 ; .FSTART _valida
                 ; 0000 00F1     if (fila==32)
0001c9 e2e0      	LDI  R30,LOW(32)
0001ca e0f0      	LDI  R31,HIGH(32)
0001cb 15e8      	CP   R30,R8
0001cc 05f9      	CPC  R31,R9
0001cd f4a9      	BRNE _0x32
                 ; 0000 00F2     {
                 ; 0000 00F3         if((j2c1!=col)&&(j2c2!=col))
0001ce d263      	RCALL SUBOPT_0xC
0001cf d272      	RCALL SUBOPT_0xE
0001d0 f031      	BREQ _0x34
0001d1 91a0 00e8 	LDS  R26,_j2c2
0001d3 91b0 00e9 	LDS  R27,_j2c2+1
0001d5 d26c      	RCALL SUBOPT_0xE
0001d6 f409      	BRNE _0x35
                 _0x34:
0001d7 c00b      	RJMP _0x33
                 _0x35:
                 ; 0000 00F4         {
                 ; 0000 00F5             delay_ms(100);
0001d8 e6a4      	LDI  R26,LOW(100)
0001d9 d26b      	RCALL SUBOPT_0xF
                 ; 0000 00F6             puntaje_p1++;
0001da 01f2      	MOVW R30,R4
0001db 9631      	ADIW R30,1
0001dc 012f      	MOVW R4,R30
                 ; 0000 00F7             if(puntaje_p1==5)
0001dd e0e5      	LDI  R30,LOW(5)
0001de e0f0      	LDI  R31,HIGH(5)
0001df 15e4      	CP   R30,R4
0001e0 05f5      	CPC  R31,R5
0001e1 f409      	BRNE _0x36
                 ; 0000 00F8             {
                 ; 0000 00F9                 puntaje_p1=0;
0001e2 d264      	RCALL SUBOPT_0x10
                 ; 0000 00FA                 puntaje_p2=0;
                 ; 0000 00FB             }
                 ; 0000 00FC         }
                 _0x36:
                 ; 0000 00FD 
                 ; 0000 00FE     }
                 _0x33:
                 ; 0000 00FF     if (fila==2)
                 _0x32:
0001e3 d232      	RCALL SUBOPT_0x6
0001e4 15e8      	CP   R30,R8
0001e5 05f9      	CPC  R31,R9
0001e6 f4a9      	BRNE _0x37
                 ; 0000 0100     {
                 ; 0000 0101         if((j1c1!=col)&&(j1c2!=col))
0001e7 d234      	RCALL SUBOPT_0x8
0001e8 d259      	RCALL SUBOPT_0xE
0001e9 f031      	BREQ _0x39
0001ea 91a0 00e4 	LDS  R26,_j1c2
0001ec 91b0 00e5 	LDS  R27,_j1c2+1
0001ee d253      	RCALL SUBOPT_0xE
0001ef f409      	BRNE _0x3A
                 _0x39:
0001f0 c00b      	RJMP _0x38
                 _0x3A:
                 ; 0000 0102         {
                 ; 0000 0103             delay_ms(100);
0001f1 e6a4      	LDI  R26,LOW(100)
0001f2 d252      	RCALL SUBOPT_0xF
                 ; 0000 0104             puntaje_p2++;
0001f3 01f3      	MOVW R30,R6
0001f4 9631      	ADIW R30,1
0001f5 013f      	MOVW R6,R30
                 ; 0000 0105             if(puntaje_p2==5)
0001f6 e0e5      	LDI  R30,LOW(5)
0001f7 e0f0      	LDI  R31,HIGH(5)
0001f8 15e6      	CP   R30,R6
0001f9 05f7      	CPC  R31,R7
0001fa f409      	BRNE _0x3B
                 ; 0000 0106             {
                 ; 0000 0107                 puntaje_p1=0;
0001fb d24b      	RCALL SUBOPT_0x10
                 ; 0000 0108                 puntaje_p2=0;
                 ; 0000 0109             }
                 ; 0000 010A         }
                 _0x3B:
                 ; 0000 010B 
                 ; 0000 010C     }
                 _0x38:
                 ; 0000 010D }
                 _0x37:
0001fc 9508      	RET
                 ; .FEND
                 ;
                 ;void mostrar_puntaje()
                 ; 0000 0110 {
                 _mostrar_puntaje:
                 ; .FSTART _mostrar_puntaje
                 ; 0000 0111     lcd_gotoxy(0,0);
0001fd e0e0      	LDI  R30,LOW(0)
0001fe 93ea      	ST   -Y,R30
0001ff e0a0      	LDI  R26,LOW(0)
000200 d034      	RCALL _lcd_gotoxy
                 ; 0000 0112     lcd_printf("Player 1:  %d", puntaje_p1);
                +
000201 e5e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000202 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000203 d248      	RCALL SUBOPT_0x11
000204 01f2      	MOVW R30,R4
000205 d249      	RCALL SUBOPT_0x12
                 ; 0000 0113     lcd_printf("Player 2:  %d", puntaje_p2);
                +
000206 e6e0     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
000207 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
000208 d243      	RCALL SUBOPT_0x11
000209 01f3      	MOVW R30,R6
00020a d244      	RCALL SUBOPT_0x12
                 ; 0000 0114 }
00020b 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00020c 931a      	ST   -Y,R17
00020d 2f1a      	MOV  R17,R26
00020e ff14      	SBRS R17,4
00020f c002      	RJMP _0x2000004
000210 9adb      	SBI  0x1B,3
000211 c001      	RJMP _0x2000005
                 _0x2000004:
000212 98db      	CBI  0x1B,3
                 _0x2000005:
000213 ff15      	SBRS R17,5
000214 c002      	RJMP _0x2000006
000215 9adc      	SBI  0x1B,4
000216 c001      	RJMP _0x2000007
                 _0x2000006:
000217 98dc      	CBI  0x1B,4
                 _0x2000007:
000218 ff16      	SBRS R17,6
000219 c002      	RJMP _0x2000008
00021a 9add      	SBI  0x1B,5
00021b c001      	RJMP _0x2000009
                 _0x2000008:
00021c 98dd      	CBI  0x1B,5
                 _0x2000009:
00021d ff17      	SBRS R17,7
00021e c002      	RJMP _0x200000A
00021f 9ade      	SBI  0x1B,6
000220 c001      	RJMP _0x200000B
                 _0x200000A:
000221 98de      	CBI  0x1B,6
                 _0x200000B:
000222 d232      	RCALL SUBOPT_0x13
000223 9ada      	SBI  0x1B,2
000224 d230      	RCALL SUBOPT_0x13
000225 98da      	CBI  0x1B,2
000226 d22e      	RCALL SUBOPT_0x13
000227 c076      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000228 93aa      	ST   -Y,R26
000229 81a8      	LD   R26,Y
00022a dfe1      	RCALL __lcd_write_nibble_G100
00022b 81e8          ld    r30,y
00022c 95e2          swap  r30
00022d 83e8          st    y,r30
00022e 81a8      	LD   R26,Y
00022f dfdc      	RCALL __lcd_write_nibble_G100
                +
000230 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000231 958a     +DEC R24
000232 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000233 9621      	ADIW R28,1
000234 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000235 d252      	RCALL __SAVELOCR2
000236 2f1a      	MOV  R17,R26
000237 810a      	LDD  R16,Y+2
000238 2fe1      	MOV  R30,R17
000239 e0f0      	LDI  R31,0
00023a 50e0      	SUBI R30,LOW(-__base_y_G100)
00023b 4fff      	SBCI R31,HIGH(-__base_y_G100)
00023c 81e0      	LD   R30,Z
00023d 0fe0      	ADD  R30,R16
00023e 2fae      	MOV  R26,R30
00023f dfe8      	RCALL __lcd_write_data
000240 9300 0104 	STS  __lcd_x,R16
000242 9310 0105 	STS  __lcd_y,R17
000244 d24a      	RCALL __LOADLOCR2
000245 9623      	ADIW R28,3
000246 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000247 e0a2      	LDI  R26,LOW(2)
000248 dfdf      	RCALL __lcd_write_data
000249 e0a3      	LDI  R26,LOW(3)
00024a d1fa      	RCALL SUBOPT_0xF
00024b e0ac      	LDI  R26,LOW(12)
00024c dfdb      	RCALL __lcd_write_data
00024d e0a1      	LDI  R26,LOW(1)
00024e dfd9      	RCALL __lcd_write_data
00024f e0a3      	LDI  R26,LOW(3)
000250 d1f4      	RCALL SUBOPT_0xF
000251 e0e0      	LDI  R30,LOW(0)
000252 93e0 0105 	STS  __lcd_y,R30
000254 93e0 0104 	STS  __lcd_x,R30
000256 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000257 931a      	ST   -Y,R17
000258 2f1a      	MOV  R17,R26
000259 301a      	CPI  R17,10
00025a f031      	BREQ _0x2000011
00025b 91e0 0106 	LDS  R30,__lcd_maxx
00025d 91a0 0104 	LDS  R26,__lcd_x
00025f 17ae      	CP   R26,R30
000260 f050      	BRLO _0x2000010
                 _0x2000011:
000261 e0e0      	LDI  R30,LOW(0)
000262 93ea      	ST   -Y,R30
000263 91a0 0105 	LDS  R26,__lcd_y
000265 5faf      	SUBI R26,-LOW(1)
000266 93a0 0105 	STS  __lcd_y,R26
000268 dfcc      	RCALL _lcd_gotoxy
000269 301a      	CPI  R17,10
00026a f199      	BREQ _0x2080001
                 _0x2000010:
00026b 91e0 0104 	LDS  R30,__lcd_x
00026d 5fef      	SUBI R30,-LOW(1)
00026e 93e0 0104 	STS  __lcd_x,R30
000270 9ad8      	SBI  0x1B,0
000271 2fa1      	MOV  R26,R17
000272 dfb5      	RCALL __lcd_write_data
000273 98d8      	CBI  0x1B,0
000274 c029      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000275 931a      	ST   -Y,R17
000276 2f1a      	MOV  R17,R26
000277 9ad3      	SBI  0x1A,3
000278 9ad4      	SBI  0x1A,4
000279 9ad5      	SBI  0x1A,5
00027a 9ad6      	SBI  0x1A,6
00027b 9ad2      	SBI  0x1A,2
00027c 9ad0      	SBI  0x1A,0
00027d 9ad1      	SBI  0x1A,1
00027e 98da      	CBI  0x1B,2
00027f 98d8      	CBI  0x1B,0
000280 98d9      	CBI  0x1B,1
000281 9310 0106 	STS  __lcd_maxx,R17
000283 2fe1      	MOV  R30,R17
000284 58e0      	SUBI R30,-LOW(128)
                +
000285 93e0 0102+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000287 2fe1      	MOV  R30,R17
000288 54e0      	SUBI R30,-LOW(192)
                +
000289 93e0 0103+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00028b e1a4      	LDI  R26,LOW(20)
00028c d1b8      	RCALL SUBOPT_0xF
00028d d1cb      	RCALL SUBOPT_0x14
00028e d1ca      	RCALL SUBOPT_0x14
00028f d1c9      	RCALL SUBOPT_0x14
000290 e2a0      	LDI  R26,LOW(32)
000291 df7a      	RCALL __lcd_write_nibble_G100
                +
000292 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000293 958a     +DEC R24
000294 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000295 e2a8      	LDI  R26,LOW(40)
000296 df91      	RCALL __lcd_write_data
000297 e0a4      	LDI  R26,LOW(4)
000298 df8f      	RCALL __lcd_write_data
000299 e8a5      	LDI  R26,LOW(133)
00029a df8d      	RCALL __lcd_write_data
00029b e0a6      	LDI  R26,LOW(6)
00029c df8b      	RCALL __lcd_write_data
00029d dfa9      	RCALL _lcd_clear
                 _0x2080001:
00029e 9119      	LD   R17,Y+
00029f 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 __print_G101:
                 ; .FSTART __print_G101
0002a0 93ba      	ST   -Y,R27
0002a1 93aa      	ST   -Y,R26
0002a2 9726      	SBIW R28,6
0002a3 d1e0      	RCALL __SAVELOCR6
0002a4 e010      	LDI  R17,0
0002a5 85ac      	LDD  R26,Y+12
0002a6 85bd      	LDD  R27,Y+12+1
0002a7 e0e0      	LDI  R30,LOW(0)
0002a8 e0f0      	LDI  R31,HIGH(0)
0002a9 93ed      	ST   X+,R30
0002aa 93fc      	ST   X,R31
                 _0x2020016:
0002ab 89ea      	LDD  R30,Y+18
0002ac 89fb      	LDD  R31,Y+18+1
0002ad 9631      	ADIW R30,1
0002ae 8bea      	STD  Y+18,R30
0002af 8bfb      	STD  Y+18+1,R31
0002b0 9731      	SBIW R30,1
0002b1 91e4      	LPM  R30,Z
0002b2 2f2e      	MOV  R18,R30
0002b3 30e0      	CPI  R30,0
0002b4 f409      	BRNE PC+2
0002b5 c102      	RJMP _0x2020018
0002b6 2fe1      	MOV  R30,R17
0002b7 30e0      	CPI  R30,0
0002b8 f431      	BRNE _0x202001C
0002b9 3225      	CPI  R18,37
0002ba f411      	BRNE _0x202001D
0002bb e011      	LDI  R17,LOW(1)
0002bc c001      	RJMP _0x202001E
                 _0x202001D:
0002bd d1a1      	RCALL SUBOPT_0x15
                 _0x202001E:
0002be c0f8      	RJMP _0x202001B
                 _0x202001C:
0002bf 30e1      	CPI  R30,LOW(0x1)
0002c0 f4a1      	BRNE _0x202001F
0002c1 3225      	CPI  R18,37
0002c2 f411      	BRNE _0x2020020
0002c3 d19b      	RCALL SUBOPT_0x15
0002c4 c0f1      	RJMP _0x20200CC
                 _0x2020020:
0002c5 e012      	LDI  R17,LOW(2)
0002c6 e040      	LDI  R20,LOW(0)
0002c7 e000      	LDI  R16,LOW(0)
0002c8 322d      	CPI  R18,45
0002c9 f411      	BRNE _0x2020021
0002ca e001      	LDI  R16,LOW(1)
0002cb c0eb      	RJMP _0x202001B
                 _0x2020021:
0002cc 322b      	CPI  R18,43
0002cd f411      	BRNE _0x2020022
0002ce e24b      	LDI  R20,LOW(43)
0002cf c0e7      	RJMP _0x202001B
                 _0x2020022:
0002d0 3220      	CPI  R18,32
0002d1 f411      	BRNE _0x2020023
0002d2 e240      	LDI  R20,LOW(32)
0002d3 c0e3      	RJMP _0x202001B
                 _0x2020023:
0002d4 c002      	RJMP _0x2020024
                 _0x202001F:
0002d5 30e2      	CPI  R30,LOW(0x2)
0002d6 f439      	BRNE _0x2020025
                 _0x2020024:
0002d7 e050      	LDI  R21,LOW(0)
0002d8 e013      	LDI  R17,LOW(3)
0002d9 3320      	CPI  R18,48
0002da f411      	BRNE _0x2020026
0002db 6800      	ORI  R16,LOW(128)
0002dc c0da      	RJMP _0x202001B
                 _0x2020026:
0002dd c003      	RJMP _0x2020027
                 _0x2020025:
0002de 30e3      	CPI  R30,LOW(0x3)
0002df f009      	BREQ PC+2
0002e0 c0d6      	RJMP _0x202001B
                 _0x2020027:
0002e1 3320      	CPI  R18,48
0002e2 f010      	BRLO _0x202002A
0002e3 332a      	CPI  R18,58
0002e4 f008      	BRLO _0x202002B
                 _0x202002A:
0002e5 c007      	RJMP _0x2020029
                 _0x202002B:
0002e6 e0aa      	LDI  R26,LOW(10)
0002e7 9f5a      	MUL  R21,R26
0002e8 2d50      	MOV  R21,R0
0002e9 2fe2      	MOV  R30,R18
0002ea 53e0      	SUBI R30,LOW(48)
0002eb 0f5e      	ADD  R21,R30
0002ec c0ca      	RJMP _0x202001B
                 _0x2020029:
0002ed 2fe2      	MOV  R30,R18
0002ee 36e3      	CPI  R30,LOW(0x63)
0002ef f439      	BRNE _0x202002F
0002f0 d175      	RCALL SUBOPT_0x16
0002f1 d177      	RCALL SUBOPT_0x17
0002f2 d173      	RCALL SUBOPT_0x16
0002f3 81a4      	LDD  R26,Z+4
0002f4 93aa      	ST   -Y,R26
0002f5 d177      	RCALL SUBOPT_0x18
0002f6 c0bf      	RJMP _0x2020030
                 _0x202002F:
0002f7 37e3      	CPI  R30,LOW(0x73)
0002f8 f429      	BRNE _0x2020032
0002f9 d179      	RCALL SUBOPT_0x19
0002fa d17a      	RCALL SUBOPT_0x1A
0002fb d0ed      	RCALL _strlen
0002fc 2f1e      	MOV  R17,R30
0002fd c007      	RJMP _0x2020033
                 _0x2020032:
0002fe 37e0      	CPI  R30,LOW(0x70)
0002ff f449      	BRNE _0x2020035
000300 d172      	RCALL SUBOPT_0x19
000301 d173      	RCALL SUBOPT_0x1A
000302 d0f2      	RCALL _strlenf
000303 2f1e      	MOV  R17,R30
000304 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000305 6002      	ORI  R16,LOW(2)
000306 770f      	ANDI R16,LOW(127)
000307 e030      	LDI  R19,LOW(0)
000308 c034      	RJMP _0x2020036
                 _0x2020035:
000309 36e4      	CPI  R30,LOW(0x64)
00030a f011      	BREQ _0x2020039
00030b 36e9      	CPI  R30,LOW(0x69)
00030c f411      	BRNE _0x202003A
                 _0x2020039:
00030d 6004      	ORI  R16,LOW(4)
00030e c002      	RJMP _0x202003B
                 _0x202003A:
00030f 37e5      	CPI  R30,LOW(0x75)
000310 f429      	BRNE _0x202003C
                 _0x202003B:
000311 e2ea      	LDI  R30,LOW(_tbl10_G101*2)
000312 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000313 d16a      	RCALL SUBOPT_0x1B
000314 e015      	LDI  R17,LOW(5)
000315 c00b      	RJMP _0x202003D
                 _0x202003C:
000316 35e8      	CPI  R30,LOW(0x58)
000317 f411      	BRNE _0x202003F
000318 6008      	ORI  R16,LOW(8)
000319 c003      	RJMP _0x2020040
                 _0x202003F:
00031a 37e8      	CPI  R30,LOW(0x78)
00031b f009      	BREQ PC+2
00031c c099      	RJMP _0x2020071
                 _0x2020040:
00031d e3e4      	LDI  R30,LOW(_tbl16_G101*2)
00031e e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00031f d15e      	RCALL SUBOPT_0x1B
000320 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000321 ff02      	SBRS R16,2
000322 c014      	RJMP _0x2020042
000323 d14f      	RCALL SUBOPT_0x19
000324 89a8      	LDD  R26,Y+16
000325 89b9      	LDD  R27,Y+16+1
000326 9614      	ADIW R26,4
000327 d0e8      	RCALL SUBOPT_0x4
000328 d158      	RCALL SUBOPT_0x1C
000329 85ab      	LDD  R26,Y+11
00032a 23aa      	TST  R26
00032b f42a      	BRPL _0x2020043
00032c 85ea      	LDD  R30,Y+10
00032d 85fb      	LDD  R31,Y+10+1
00032e d167      	RCALL __ANEGW1
00032f d151      	RCALL SUBOPT_0x1C
000330 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000331 3040      	CPI  R20,0
000332 f011      	BREQ _0x2020044
000333 5f1f      	SUBI R17,-LOW(1)
000334 c001      	RJMP _0x2020045
                 _0x2020044:
000335 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000336 c006      	RJMP _0x2020046
                 _0x2020042:
000337 d13b      	RCALL SUBOPT_0x19
000338 89a8      	LDD  R26,Y+16
000339 89b9      	LDD  R27,Y+16+1
00033a 9614      	ADIW R26,4
00033b d189      	RCALL __GETW1P
00033c d144      	RCALL SUBOPT_0x1C
                 _0x2020046:
                 _0x2020036:
00033d fd00      	SBRC R16,0
00033e c010      	RJMP _0x2020047
                 _0x2020048:
00033f 1715      	CP   R17,R21
000340 f470      	BRSH _0x202004A
000341 ff07      	SBRS R16,7
000342 c008      	RJMP _0x202004B
000343 ff02      	SBRS R16,2
000344 c004      	RJMP _0x202004C
000345 7f0b      	ANDI R16,LOW(251)
000346 2f24      	MOV  R18,R20
000347 5011      	SUBI R17,LOW(1)
000348 c001      	RJMP _0x202004D
                 _0x202004C:
000349 e320      	LDI  R18,LOW(48)
                 _0x202004D:
00034a c001      	RJMP _0x202004E
                 _0x202004B:
00034b e220      	LDI  R18,LOW(32)
                 _0x202004E:
00034c d112      	RCALL SUBOPT_0x15
00034d 5051      	SUBI R21,LOW(1)
00034e cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00034f 2f31      	MOV  R19,R17
000350 ff01      	SBRS R16,1
000351 c015      	RJMP _0x202004F
                 _0x2020050:
000352 3030      	CPI  R19,0
000353 f091      	BREQ _0x2020052
000354 ff03      	SBRS R16,3
000355 c005      	RJMP _0x2020053
000356 81ee      	LDD  R30,Y+6
000357 81ff      	LDD  R31,Y+6+1
000358 9125      	LPM  R18,Z+
000359 d124      	RCALL SUBOPT_0x1B
00035a c005      	RJMP _0x2020054
                 _0x2020053:
00035b 81ae      	LDD  R26,Y+6
00035c 81bf      	LDD  R27,Y+6+1
00035d 912d      	LD   R18,X+
00035e 83ae      	STD  Y+6,R26
00035f 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000360 d0fe      	RCALL SUBOPT_0x15
000361 3050      	CPI  R21,0
000362 f009      	BREQ _0x2020055
000363 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000364 5031      	SUBI R19,LOW(1)
000365 cfec      	RJMP _0x2020050
                 _0x2020052:
000366 c046      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000367 e320      	LDI  R18,LOW(48)
000368 81ee      	LDD  R30,Y+6
000369 81ff      	LDD  R31,Y+6+1
00036a d15e      	RCALL __GETW1PF
00036b 87e8      	STD  Y+8,R30
00036c 87f9      	STD  Y+8+1,R31
00036d 81ee      	LDD  R30,Y+6
00036e 81ff      	LDD  R31,Y+6+1
00036f 9632      	ADIW R30,2
000370 d10d      	RCALL SUBOPT_0x1B
                 _0x202005A:
000371 85e8      	LDD  R30,Y+8
000372 85f9      	LDD  R31,Y+8+1
000373 85aa      	LDD  R26,Y+10
000374 85bb      	LDD  R27,Y+10+1
000375 17ae      	CP   R26,R30
000376 07bf      	CPC  R27,R31
000377 f048      	BRLO _0x202005C
000378 5f2f      	SUBI R18,-LOW(1)
000379 85a8      	LDD  R26,Y+8
00037a 85b9      	LDD  R27,Y+8+1
00037b 85ea      	LDD  R30,Y+10
00037c 85fb      	LDD  R31,Y+10+1
00037d 1bea      	SUB  R30,R26
00037e 0bfb      	SBC  R31,R27
00037f d101      	RCALL SUBOPT_0x1C
000380 cff0      	RJMP _0x202005A
                 _0x202005C:
000381 332a      	CPI  R18,58
000382 f028      	BRLO _0x202005D
000383 ff03      	SBRS R16,3
000384 c002      	RJMP _0x202005E
000385 5f29      	SUBI R18,-LOW(7)
000386 c001      	RJMP _0x202005F
                 _0x202005E:
000387 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000388 fd04      	SBRC R16,4
000389 c019      	RJMP _0x2020061
00038a 3321      	CPI  R18,49
00038b f420      	BRSH _0x2020063
00038c 85a8      	LDD  R26,Y+8
00038d 85b9      	LDD  R27,Y+8+1
00038e 9711      	SBIW R26,1
00038f f409      	BRNE _0x2020062
                 _0x2020063:
000390 c009      	RJMP _0x20200CD
                 _0x2020062:
000391 1753      	CP   R21,R19
000392 f010      	BRLO _0x2020067
000393 ff00      	SBRS R16,0
000394 c001      	RJMP _0x2020068
                 _0x2020067:
000395 c011      	RJMP _0x2020066
                 _0x2020068:
000396 e220      	LDI  R18,LOW(32)
000397 ff07      	SBRS R16,7
000398 c00a      	RJMP _0x2020069
000399 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
00039a 6100      	ORI  R16,LOW(16)
00039b ff02      	SBRS R16,2
00039c c006      	RJMP _0x202006A
00039d 7f0b      	ANDI R16,LOW(251)
00039e 934a      	ST   -Y,R20
00039f d0cd      	RCALL SUBOPT_0x18
0003a0 3050      	CPI  R21,0
0003a1 f009      	BREQ _0x202006B
0003a2 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0003a3 d0bb      	RCALL SUBOPT_0x15
0003a4 3050      	CPI  R21,0
0003a5 f009      	BREQ _0x202006C
0003a6 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0003a7 5031      	SUBI R19,LOW(1)
0003a8 85a8      	LDD  R26,Y+8
0003a9 85b9      	LDD  R27,Y+8+1
0003aa 9712      	SBIW R26,2
0003ab f008      	BRLO _0x2020059
0003ac cfba      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0003ad ff00      	SBRS R16,0
0003ae c007      	RJMP _0x202006D
                 _0x202006E:
0003af 3050      	CPI  R21,0
0003b0 f029      	BREQ _0x2020070
0003b1 5051      	SUBI R21,LOW(1)
0003b2 e2e0      	LDI  R30,LOW(32)
0003b3 93ea      	ST   -Y,R30
0003b4 d0b8      	RCALL SUBOPT_0x18
0003b5 cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0003b6 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0003b7 cef3      	RJMP _0x2020016
                 _0x2020018:
0003b8 85ac      	LDD  R26,Y+12
0003b9 85bd      	LDD  R27,Y+12+1
0003ba d055      	RCALL SUBOPT_0x4
0003bb d0cf      	RCALL __LOADLOCR6
0003bc 9664      	ADIW R28,20
0003bd 9508      	RET
                 ; .FEND
                 _put_lcd_G101:
                 ; .FSTART _put_lcd_G101
0003be d0c7      	RCALL __SAVELOCR4
0003bf 018d      	MOVW R16,R26
0003c0 813c      	LDD  R19,Y+4
0003c1 2fa3      	MOV  R26,R19
0003c2 de94      	RCALL _lcd_putchar
0003c3 01d8      	MOVW R26,R16
0003c4 d04b      	RCALL SUBOPT_0x4
0003c5 9631      	ADIW R30,1
0003c6 93fe      	ST   -X,R31
0003c7 93ee      	ST   -X,R30
0003c8 d0c4      	RCALL __LOADLOCR4
0003c9 9625      	ADIW R28,5
0003ca 9508      	RET
                 ; .FEND
                 _lcd_printf:
                 ; .FSTART _lcd_printf
0003cb 92ff      	PUSH R15
0003cc 2ef8      	MOV  R15,R24
0003cd 9726      	SBIW R28,6
0003ce d0b9      	RCALL __SAVELOCR2
0003cf 01de      	MOVW R26,R28
0003d0 9614      	ADIW R26,4
0003d1 d0c0      	RCALL __ADDW2R15
0003d2 018d      	MOVW R16,R26
0003d3 e0e0      	LDI  R30,LOW(0)
0003d4 83ec      	STD  Y+4,R30
0003d5 83ed      	STD  Y+4+1,R30
0003d6 83ee      	STD  Y+6,R30
0003d7 83ef      	STD  Y+6+1,R30
0003d8 01de      	MOVW R26,R28
0003d9 9618      	ADIW R26,8
0003da d0b7      	RCALL __ADDW2R15
0003db d034      	RCALL SUBOPT_0x4
0003dc d06f      	RCALL SUBOPT_0x11
0003dd 931a      	ST   -Y,R17
0003de 930a      	ST   -Y,R16
0003df ebee      	LDI  R30,LOW(_put_lcd_G101)
0003e0 e0f3      	LDI  R31,HIGH(_put_lcd_G101)
0003e1 d06a      	RCALL SUBOPT_0x11
0003e2 01de      	MOVW R26,R28
0003e3 9618      	ADIW R26,8
0003e4 debb      	RCALL __print_G101
0003e5 d0a9      	RCALL __LOADLOCR2
0003e6 9628      	ADIW R28,8
0003e7 90ff      	POP  R15
0003e8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003e9 93ba      	ST   -Y,R27
0003ea 93aa      	ST   -Y,R26
0003eb 91a9          ld   r26,y+
0003ec 91b9          ld   r27,y+
0003ed 27ee          clr  r30
0003ee 27ff          clr  r31
                 strlen0:
0003ef 916d          ld   r22,x+
0003f0 2366          tst  r22
0003f1 f011          breq strlen1
0003f2 9631          adiw r30,1
0003f3 cffb          rjmp strlen0
                 strlen1:
0003f4 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003f5 93ba      	ST   -Y,R27
0003f6 93aa      	ST   -Y,R26
0003f7 27aa          clr  r26
0003f8 27bb          clr  r27
0003f9 91e9          ld   r30,y+
0003fa 91f9          ld   r31,y+
                 strlenf0:
0003fb 9005      	lpm  r0,z+
0003fc 2000          tst  r0
0003fd f011          breq strlenf1
0003fe 9611          adiw r26,1
0003ff cffb          rjmp strlenf0
                 strlenf1:
000400 01fd          movw r30,r26
000401 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _bc:
0000e0           	.BYTE 0x2
                 _j1c1:
0000e2           	.BYTE 0x2
                 _j1c2:
0000e4           	.BYTE 0x2
                 _j2c1:
0000e6           	.BYTE 0x2
                 _j2c2:
0000e8           	.BYTE 0x2
                 _filj1:
0000ea           	.BYTE 0x2
                 _filj2:
0000ec           	.BYTE 0x2
                 _contador:
0000ee           	.BYTE 0x2
                 _bdaj1:
0000f0           	.BYTE 0x2
                 _bdpj1:
0000f2           	.BYTE 0x2
                 _biaj1:
0000f4           	.BYTE 0x2
                 _bipj1:
0000f6           	.BYTE 0x2
                 _bdaj2:
0000f8           	.BYTE 0x2
                 _bdpj2:
0000fa           	.BYTE 0x2
                 _biaj2:
0000fc           	.BYTE 0x2
                 _bipj2:
0000fe           	.BYTE 0x2
                 __base_y_G100:
000100           	.BYTE 0x4
                 __lcd_x:
000104           	.BYTE 0x1
                 __lcd_y:
000105           	.BYTE 0x1
                 __lcd_maxx:
000106           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000402 95e0      	COM  R30
000403 bbe2      	OUT  0x12,R30
000404 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
000405 e0a5      	LDI  R26,LOW(5)
000406 e0b0      	LDI  R27,0
000407 c0ca      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000408 bbe5      	OUT  0x15,R30
000409 91e0 00ea 	LDS  R30,_filj1
00040b cff6      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00040c bbe5      	OUT  0x15,R30
00040d 91e0 00ec 	LDS  R30,_filj2
00040f cff2      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000410 91ed      	LD   R30,X+
000411 91fd      	LD   R31,X+
000412 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
000413 e0e1      	LDI  R30,LOW(1)
000414 e0f0      	LDI  R31,HIGH(1)
000415 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
000416 e0e2      	LDI  R30,LOW(2)
000417 e0f0      	LDI  R31,HIGH(2)
000418 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000419 dffc      	RCALL SUBOPT_0x6
00041a d097      	RCALL __DIVW21
00041b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
00041c 91a0 00e2 	LDS  R26,_j1c1
00041e 91b0 00e3 	LDS  R27,_j1c1+1
000420 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x9:
000421 91e0 00e2 	LDS  R30,_j1c1
000423 91f0 00e3 	LDS  R31,_j1c1+1
000425 0fee      	LSL  R30
000426 1fff      	ROL  R31
000427 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000428 93e0 00e2 	STS  _j1c1,R30
00042a 93f0 00e3 	STS  _j1c1+1,R31
00042c cff4      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00042d 93e0 00e4 	STS  _j1c2,R30
00042f 93f0 00e5 	STS  _j1c2+1,R31
000431 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
000432 91a0 00e6 	LDS  R26,_j2c1
000434 91b0 00e7 	LDS  R27,_j2c1+1
000436 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xD:
000437 93e0 00e6 	STS  _j2c1,R30
000439 93f0 00e7 	STS  _j2c1+1,R31
00043b 0fee      	LSL  R30
00043c 1fff      	ROL  R31
00043d 93e0 00e8 	STS  _j2c2,R30
00043f 93f0 00e9 	STS  _j2c2+1,R31
000441 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000442 16aa      	CP   R10,R26
000443 06bb      	CPC  R11,R27
000444 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
000445 e0b0      	LDI  R27,0
000446 c08b      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000447 2444      	CLR  R4
000448 2455      	CLR  R5
000449 2466      	CLR  R6
00044a 2477      	CLR  R7
00044b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00044c 93fa      	ST   -Y,R31
00044d 93ea      	ST   -Y,R30
00044e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
00044f d04a      	RCALL __CWD1
000450 d07c      	RCALL __PUTPARD1
000451 e084      	LDI  R24,4
000452 df78      	RCALL _lcd_printf
000453 9626      	ADIW R28,6
000454 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
                +
000455 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000456 958a     +DEC R24
000457 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000458 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x14:
000459 e3a0      	LDI  R26,LOW(48)
00045a ddb1      	RCALL __lcd_write_nibble_G100
                +
00045b e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00045c 958a     +DEC R24
00045d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00045e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x15:
00045f 932a      	ST   -Y,R18
000460 85ad      	LDD  R26,Y+13
000461 85be      	LDD  R27,Y+13+1
000462 85ef      	LDD  R30,Y+15
000463 89f8      	LDD  R31,Y+15+1
000464 9509      	ICALL
000465 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
000466 89e8      	LDD  R30,Y+16
000467 89f9      	LDD  R31,Y+16+1
000468 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x17:
000469 9734      	SBIW R30,4
00046a 8be8      	STD  Y+16,R30
00046b 8bf9      	STD  Y+16+1,R31
00046c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x18:
00046d 85ad      	LDD  R26,Y+13
00046e 85be      	LDD  R27,Y+13+1
00046f 85ef      	LDD  R30,Y+15
000470 89f8      	LDD  R31,Y+15+1
000471 9509      	ICALL
000472 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
000473 dff2      	RCALL SUBOPT_0x16
000474 cff4      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1A:
000475 89a8      	LDD  R26,Y+16
000476 89b9      	LDD  R27,Y+16+1
000477 9614      	ADIW R26,4
000478 df97      	RCALL SUBOPT_0x4
000479 83ee      	STD  Y+6,R30
00047a 83ff      	STD  Y+6+1,R31
00047b 81ae      	LDD  R26,Y+6
00047c 81bf      	LDD  R27,Y+6+1
00047d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
00047e 83ee      	STD  Y+6,R30
00047f 83ff      	STD  Y+6+1,R31
000480 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
000481 87ea      	STD  Y+10,R30
000482 87fb      	STD  Y+10+1,R31
000483 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000484 935a      	ST   -Y,R21
                 __SAVELOCR5:
000485 934a      	ST   -Y,R20
                 __SAVELOCR4:
000486 933a      	ST   -Y,R19
                 __SAVELOCR3:
000487 932a      	ST   -Y,R18
                 __SAVELOCR2:
000488 931a      	ST   -Y,R17
000489 930a      	ST   -Y,R16
00048a 9508      	RET
                 
                 __LOADLOCR6:
00048b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00048c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00048d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00048e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00048f 8119      	LDD  R17,Y+1
000490 8108      	LD   R16,Y
000491 9508      	RET
                 
                 __ADDW2R15:
000492 2400      	CLR  R0
000493 0daf      	ADD  R26,R15
000494 1db0      	ADC  R27,R0
000495 9508      	RET
                 
                 __ANEGW1:
000496 95f1      	NEG  R31
000497 95e1      	NEG  R30
000498 40f0      	SBCI R31,0
000499 9508      	RET
                 
                 __CWD1:
00049a 2f6f      	MOV  R22,R31
00049b 0f66      	ADD  R22,R22
00049c 0b66      	SBC  R22,R22
00049d 2f76      	MOV  R23,R22
00049e 9508      	RET
                 
                 __DIVW21U:
00049f 2400      	CLR  R0
0004a0 2411      	CLR  R1
0004a1 e190      	LDI  R25,16
                 __DIVW21U1:
0004a2 0faa      	LSL  R26
0004a3 1fbb      	ROL  R27
0004a4 1c00      	ROL  R0
0004a5 1c11      	ROL  R1
0004a6 1a0e      	SUB  R0,R30
0004a7 0a1f      	SBC  R1,R31
0004a8 f418      	BRCC __DIVW21U2
0004a9 0e0e      	ADD  R0,R30
0004aa 1e1f      	ADC  R1,R31
0004ab c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0004ac 60a1      	SBR  R26,1
                 __DIVW21U3:
0004ad 959a      	DEC  R25
0004ae f799      	BRNE __DIVW21U1
0004af 01fd      	MOVW R30,R26
0004b0 01d0      	MOVW R26,R0
0004b1 9508      	RET
                 
                 __DIVW21:
0004b2 d004      	RCALL __CHKSIGNW
0004b3 dfeb      	RCALL __DIVW21U
0004b4 f40e      	BRTC __DIVW211
0004b5 dfe0      	RCALL __ANEGW1
                 __DIVW211:
0004b6 9508      	RET
                 
                 __CHKSIGNW:
0004b7 94e8      	CLT
0004b8 fff7      	SBRS R31,7
0004b9 c002      	RJMP __CHKSW1
0004ba dfdb      	RCALL __ANEGW1
0004bb 9468      	SET
                 __CHKSW1:
0004bc ffb7      	SBRS R27,7
0004bd c006      	RJMP __CHKSW2
0004be 95b1      	NEG  R27
0004bf 95a1      	NEG  R26
0004c0 40b0      	SBCI R27,0
0004c1 f800      	BLD  R0,0
0004c2 9403      	INC  R0
0004c3 fa00      	BST  R0,0
                 __CHKSW2:
0004c4 9508      	RET
                 
                 __GETW1P:
0004c5 91ed      	LD   R30,X+
0004c6 91fc      	LD   R31,X
0004c7 9711      	SBIW R26,1
0004c8 9508      	RET
                 
                 __GETW1PF:
0004c9 9005      	LPM  R0,Z+
0004ca 91f4      	LPM  R31,Z
0004cb 2de0      	MOV  R30,R0
0004cc 9508      	RET
                 
                 __PUTPARD1:
0004cd 937a      	ST   -Y,R23
0004ce 936a      	ST   -Y,R22
0004cf 93fa      	ST   -Y,R31
0004d0 93ea      	ST   -Y,R30
0004d1 9508      	RET
                 
                 _delay_ms:
0004d2 9610      	adiw r26,0
0004d3 f039      	breq __delay_ms1
                 __delay_ms0:
0004d4 95a8      	wdr
                +
0004d5 ef8a     +LDI R24 , LOW ( 0xFA )
0004d6 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0004d7 9701     +SBIW R24 , 1
0004d8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0004d9 9711      	sbiw r26,1
0004da f7c9      	brne __delay_ms0
                 __delay_ms1:
0004db 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :  21 r1 :   5 r2 :   0 r3 :   0 r4 :   5 r5 :   2 r6 :   5 r7 :   2 
r8 :   9 r9 :   6 r10:  10 r11:   5 r12:   5 r13:   4 r14:   0 r15:   4 
r16:  33 r17:  37 r18:  27 r19:  10 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  19 r25:   5 r26: 118 r27:  45 r28:  12 r29:   1 r30: 239 r31:  85 
x  :  15 y  : 112 z  :  14 
Registers used: 32 out of 35 (91.4%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  21 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  21 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   2 brmi  :   0 brne  :  42 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :   9 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  15 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   1 cp    :  15 
cpc   :  12 cpi   :  31 cpse  :   0 dec   :   6 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 in    :   0 
inc   :   1 ld    :  16 ldd   :  55 ldi   : 108 lds   :  50 lpm   :  14 
lsl   :   8 lsr   :   0 mov   :  25 movw  :  25 mul   :   1 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   1 ori   :   6 out   :  44 
pop   :   1 push  :   1 rcall : 147 ret   :  52 reti  :   0 rjmp  : 111 
rol   :  10 ror   :   0 sbc   :   3 sbci  :   3 sbi   :  13 sbic  :   4 
sbis  :   0 sbiw  :  26 sbr   :   1 sbrc  :   2 sbrs  :  16 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  40 std   :  18 
sts   :  47 sub   :   2 subi  :  18 swap  :   1 tst   :   3 wdr   :   1 

Instructions used: 62 out of 114 (54.4%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009b8   2368    120   2488    8192  30.4%
[.dseg] 0x000060 0x000107      0     39     39     512   7.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 16 warnings
