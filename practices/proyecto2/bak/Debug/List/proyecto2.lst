
AVRASM ver. 2.1.30  D:\Escritorio\MCS\practices\proyecto2\Debug\List\proyecto2.asm Mon Mar 18 22:00:11 2019

                 
                 
                 ;CodeVisionAVR C Compiler V3.34 Evaluation
                 ;(C) Copyright 1998-2018 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535L
                 ;Program type           : Application
                 ;Clock frequency        : 3.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c019      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000015 0000      	.DW  0x0000
                 
                 
                 __GLOBAL_INI_TBL:
000016 0002      	.DW  0x02
000017 0002      	.DW  0x02
000018 002a      	.DW  __REG_BIT_VARS*2
                 
                 _0xFFFFFFFF:
000019 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001a 94f8      	CLI
00001b 27ee      	CLR  R30
00001c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00001d e0f1      	LDI  R31,1
00001e bffb      	OUT  GICR,R31
00001f bfeb      	OUT  GICR,R30
000020 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000021 e08d      	LDI  R24,(14-2)+1
000022 e0a2      	LDI  R26,2
000023 27bb      	CLR  R27
                 __CLEAR_REG:
000024 93ed      	ST   X+,R30
000025 958a      	DEC  R24
000026 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000027 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000028 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000029 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002a 93ed      	ST   X+,R30
00002b 9701      	SBIW R24,1
00002c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00002d e2ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00002e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00002f 9185      	LPM  R24,Z+
000030 9195      	LPM  R25,Z+
000031 9700      	SBIW R24,0
000032 f061      	BREQ __GLOBAL_INI_END
000033 91a5      	LPM  R26,Z+
000034 91b5      	LPM  R27,Z+
000035 9005      	LPM  R0,Z+
000036 9015      	LPM  R1,Z+
000037 01bf      	MOVW R22,R30
000038 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000039 9005      	LPM  R0,Z+
00003a 920d      	ST   X+,R0
00003b 9701      	SBIW R24,1
00003c f7e1      	BRNE __GLOBAL_INI_LOOP
00003d 01fb      	MOVW R30,R22
00003e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00003f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000040 bfed      	OUT  SPL,R30
000041 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000042 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000043 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000044 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000045 c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 ;#include <mega8535.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;/*void send_data(int);*/
                 ;
                 ;#define b_clr_and_save PINB.0
                 ;bit b_clr_and_save_p;
                 ;bit b_clr_and_save_a;
                 ;
                 ;#define b_start PINB.1
                 ;bit b_start_p;
                 ;bit b_start_a;
                 ;
                 ;#define b_stop PINB.2
                 ;bit b_stop_p;
                 ;bit b_stop_a;
                 ;
                 ;#define MEM_SIZE 10
                 ;#define INST_ARR 1
                 ;#define INST_ABJ 2
                 ;#define INST_IZQ 3
                 ;#define INST_DER 4
                 ;eeprom char memory[MEM_SIZE];
                 ;
                 ;#define b_der PINB.3
                 ;bit b_der_p;
                 ;bit b_der_a;
                 ;
                 ;#define b_izq PINB.4
                 ;bit b_izq_p;
                 ;bit b_izq_a;
                 ;
                 ;#define b_arr PINB.5
                 ;bit b_arr_p;
                 ;bit b_arr_a;
                 ;
                 ;#define b_abj PINB.6
                 ;bit b_abj_p;
                 ;bit b_abj_a;
                 ;
                 ;void main(void)
                 ; 0000 002A {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002B     int i = 0;
                 ; 0000 002C     bit completed = 0;
                 ; 0000 002D     /*
                 ; 0000 002E     bit flag_contador_arr = 0;
                 ; 0000 002F     unsigned long contador_arr = 0;
                 ; 0000 0030     bit flag_contador_abj = 0;
                 ; 0000 0031     unsigned long contador_abj = 0;
                 ; 0000 0032     bit flag_contador_izq = 0;
                 ; 0000 0033     unsigned long contador_izq = 0;
                 ; 0000 0034     bit flag_contador_der = 0;
                 ; 0000 0035     unsigned long contador_der = 0;*/
                 ; 0000 0036 
                 ; 0000 0037 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
                 ;	i -> R16,R17
                 ;	completed -> R15.0
000046 24ff      	CLR  R15
000047 d0c7      	RCALL SUBOPT_0x0
000048 efef      	LDI  R30,LOW(255)
000049 bbea      	OUT  0x1A,R30
                 ; 0000 0038 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00004a e0e0      	LDI  R30,LOW(0)
00004b bbeb      	OUT  0x1B,R30
                 ; 0000 0039 
                 ; 0000 003A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00004c bbe7      	OUT  0x17,R30
                 ; 0000 003B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00004d bbe8      	OUT  0x18,R30
                 ; 0000 003C 
                 ; 0000 003D DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00004e efef      	LDI  R30,LOW(255)
00004f bbe4      	OUT  0x14,R30
                 ; 0000 003E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000050 e0e0      	LDI  R30,LOW(0)
000051 bbe5      	OUT  0x15,R30
                 ; 0000 003F 
                 ; 0000 0040 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000052 efef      	LDI  R30,LOW(255)
000053 bbe1      	OUT  0x11,R30
                 ; 0000 0041 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000054 e0e0      	LDI  R30,LOW(0)
000055 bbe2      	OUT  0x12,R30
                 ; 0000 0042 
                 ; 0000 0043 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000056 bfe3      	OUT  0x33,R30
                 ; 0000 0044 TCNT0=0x00;
000057 bfe2      	OUT  0x32,R30
                 ; 0000 0045 OCR0=0x00;
000058 bfec      	OUT  0x3C,R30
                 ; 0000 0046 
                 ; 0000 0047 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000059 bdef      	OUT  0x2F,R30
                 ; 0000 0048 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00005a bdee      	OUT  0x2E,R30
                 ; 0000 0049 TCNT1H=0x00;
00005b bded      	OUT  0x2D,R30
                 ; 0000 004A TCNT1L=0x00;
00005c bdec      	OUT  0x2C,R30
                 ; 0000 004B ICR1H=0x00;
00005d bde7      	OUT  0x27,R30
                 ; 0000 004C ICR1L=0x00;
00005e bde6      	OUT  0x26,R30
                 ; 0000 004D OCR1AH=0x00;
00005f bdeb      	OUT  0x2B,R30
                 ; 0000 004E OCR1AL=0x00;
000060 bdea      	OUT  0x2A,R30
                 ; 0000 004F OCR1BH=0x00;
000061 bde9      	OUT  0x29,R30
                 ; 0000 0050 OCR1BL=0x00;
000062 bde8      	OUT  0x28,R30
                 ; 0000 0051 
                 ; 0000 0052 ASSR=0<<AS2;
000063 bde2      	OUT  0x22,R30
                 ; 0000 0053 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000064 bde5      	OUT  0x25,R30
                 ; 0000 0054 TCNT2=0x00;
000065 bde4      	OUT  0x24,R30
                 ; 0000 0055 OCR2=0x00;
000066 bde3      	OUT  0x23,R30
                 ; 0000 0056 
                 ; 0000 0057 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000067 bfe9      	OUT  0x39,R30
                 ; 0000 0058 
                 ; 0000 0059 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000068 bfe5      	OUT  0x35,R30
                 ; 0000 005A MCUCSR=(0<<ISC2);
000069 bfe4      	OUT  0x34,R30
                 ; 0000 005B 
                 ; 0000 005C UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00006a b9ea      	OUT  0xA,R30
                 ; 0000 005D 
                 ; 0000 005E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00006b e8e0      	LDI  R30,LOW(128)
00006c b9e8      	OUT  0x8,R30
                 ; 0000 005F SFIOR=(0<<ACME);
00006d e0e0      	LDI  R30,LOW(0)
00006e bfe0      	OUT  0x30,R30
                 ; 0000 0060 
                 ; 0000 0061 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00006f b9e6      	OUT  0x6,R30
                 ; 0000 0062 
                 ; 0000 0063 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000070 b9ed      	OUT  0xD,R30
                 ; 0000 0064 
                 ; 0000 0065 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000071 bfe6      	OUT  0x36,R30
                 ; 0000 0066 
                 ; 0000 0067     while (1)
                 _0x3:
                 ; 0000 0068     {
                 ; 0000 0069         // Se borran las instrucciones y se guardan una por una las nuevas
                 ; 0000 006A          if(b_clr_and_save == 0) {
000072 99b0      	SBIC 0x16,0
000073 c002      	RJMP _0x6
                 ; 0000 006B              b_clr_and_save_a = 0;
000074 94e8      	CLT
000075 c001      	RJMP _0x42
                 ; 0000 006C          } else {
                 _0x6:
                 ; 0000 006D              b_clr_and_save_a = 1;
000076 9468      	SET
                 _0x42:
000077 f821      	BLD  R2,1
                 ; 0000 006E          }
                 ; 0000 006F          if((b_clr_and_save_p == 1) && (b_clr_and_save_a == 0)) {// Cambio de flanco de 1 a 0
000078 fe20      	SBRS R2,0
000079 c002      	RJMP _0x9
00007a fe21      	SBRS R2,1
00007b c001      	RJMP _0xA
                 _0x9:
00007c c05d      	RJMP _0x8
                 _0xA:
                 ; 0000 0070             // Borrado
                 ; 0000 0071 
                 ; 0000 0072             for (i = 0; i < MEM_SIZE; i++) {
00007d d091      	RCALL SUBOPT_0x0
                 _0xC:
                +
00007e 300a     +CPI R16 , LOW ( 10 )
00007f e0e0     +LDI R30 , HIGH ( 10 )
000080 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
000081 f42c      	BRGE _0xD
                 ; 0000 0073                 memory[i] = 0;
000082 d08f      	RCALL SUBOPT_0x1
000083 e0e0      	LDI  R30,LOW(0)
000084 d0a6      	RCALL __EEPROMWRB
                 ; 0000 0074             }
000085 d091      	RCALL SUBOPT_0x2
000086 cff7      	RJMP _0xC
                 _0xD:
                 ; 0000 0075             // Nuevas Instrucciones
                 ; 0000 0076             PORTC.0 = 1;
000087 9aa8      	SBI  0x15,0
                 ; 0000 0077             completed = 0;
000088 94e8      	CLT
000089 f8f0      	BLD  R15,0
                 ; 0000 0078             i = 0;
00008a d084      	RCALL SUBOPT_0x0
                 ; 0000 0079 
                 ; 0000 007A             while (!completed) {
                 _0x10:
00008b fcf0      	SBRC R15,0
00008c c04d      	RJMP _0x12
                 ; 0000 007B                /* Boton arriba */
                 ; 0000 007C                if(b_arr == 0) {
00008d 99b5      	SBIC 0x16,5
00008e c002      	RJMP _0x13
                 ; 0000 007D                    b_arr_a = 0;
00008f 94e8      	CLT
000090 c001      	RJMP _0x43
                 ; 0000 007E                } else {
                 _0x13:
                 ; 0000 007F                    b_arr_a = 1;
000091 9468      	SET
                 _0x43:
000092 f833      	BLD  R3,3
                 ; 0000 0080                }
                 ; 0000 0081                if((b_arr_p == 1) && (b_arr_a == 0))// Cambio de flanco de 1 a 0
000093 fe32      	SBRS R3,2
000094 c002      	RJMP _0x16
000095 fe33      	SBRS R3,3
000096 c001      	RJMP _0x17
                 _0x16:
000097 c004      	RJMP _0x15
                 _0x17:
                 ; 0000 0082                {
                 ; 0000 0083                    // Guardamos un 1 para la izquierda
                 ; 0000 0084                    memory[i] = INST_ARR;
000098 d079      	RCALL SUBOPT_0x1
000099 e0e1      	LDI  R30,LOW(1)
00009a d07f      	RCALL SUBOPT_0x3
                 ; 0000 0085                    i++;
                 ; 0000 0086                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
00009b d080      	RCALL SUBOPT_0x4
                 ; 0000 0087                }
                 ; 0000 0088                b_arr_p=b_arr_a;
                 _0x15:
00009c fa33      	BST  R3,3
00009d f832      	BLD  R3,2
                 ; 0000 0089 
                 ; 0000 008A                /* Boton abajo */
                 ; 0000 008B                if(b_abj == 0) {
00009e 99b6      	SBIC 0x16,6
00009f c002      	RJMP _0x18
                 ; 0000 008C                    b_abj_a = 0;
0000a0 94e8      	CLT
0000a1 c001      	RJMP _0x44
                 ; 0000 008D                } else {
                 _0x18:
                 ; 0000 008E                    b_abj_a = 1;
0000a2 9468      	SET
                 _0x44:
0000a3 f835      	BLD  R3,5
                 ; 0000 008F                }
                 ; 0000 0090                if((b_abj_p == 1) && (b_abj_a == 0))// Cambio de flanco de 1 a 0
0000a4 fe34      	SBRS R3,4
0000a5 c002      	RJMP _0x1B
0000a6 fe35      	SBRS R3,5
0000a7 c001      	RJMP _0x1C
                 _0x1B:
0000a8 c004      	RJMP _0x1A
                 _0x1C:
                 ; 0000 0091                {
                 ; 0000 0092                    // Guardamos un 1 para la izquierda
                 ; 0000 0093                    memory[i] = INST_ABJ;
0000a9 d068      	RCALL SUBOPT_0x1
0000aa e0e2      	LDI  R30,LOW(2)
0000ab d06e      	RCALL SUBOPT_0x3
                 ; 0000 0094                    i++;
                 ; 0000 0095                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
0000ac d06f      	RCALL SUBOPT_0x4
                 ; 0000 0096                }
                 ; 0000 0097                b_abj_p=b_abj_a;
                 _0x1A:
0000ad fa35      	BST  R3,5
0000ae f834      	BLD  R3,4
                 ; 0000 0098 
                 ; 0000 0099 
                 ; 0000 009A                /* Boton izquierdo */
                 ; 0000 009B                if(b_izq == 0) {
0000af 99b4      	SBIC 0x16,4
0000b0 c002      	RJMP _0x1D
                 ; 0000 009C                    b_izq_a = 0;
0000b1 94e8      	CLT
0000b2 c001      	RJMP _0x45
                 ; 0000 009D                } else {
                 _0x1D:
                 ; 0000 009E                    b_izq_a = 1;
0000b3 9468      	SET
                 _0x45:
0000b4 f831      	BLD  R3,1
                 ; 0000 009F                }
                 ; 0000 00A0                if((b_izq_p == 1) && (b_izq_a == 0))// Cambio de flanco de 1 a 0
0000b5 fe30      	SBRS R3,0
0000b6 c002      	RJMP _0x20
0000b7 fe31      	SBRS R3,1
0000b8 c001      	RJMP _0x21
                 _0x20:
0000b9 c004      	RJMP _0x1F
                 _0x21:
                 ; 0000 00A1                {
                 ; 0000 00A2                    // Guardamos un 3 para la izquierda
                 ; 0000 00A3                    memory[i] = INST_IZQ;
0000ba d057      	RCALL SUBOPT_0x1
0000bb e0e3      	LDI  R30,LOW(3)
0000bc d05d      	RCALL SUBOPT_0x3
                 ; 0000 00A4                    i++;
                 ; 0000 00A5                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
0000bd d05e      	RCALL SUBOPT_0x4
                 ; 0000 00A6                }
                 ; 0000 00A7                b_izq_p=b_izq_a;
                 _0x1F:
0000be fa31      	BST  R3,1
0000bf f830      	BLD  R3,0
                 ; 0000 00A8 
                 ; 0000 00A9 
                 ; 0000 00AA                 /* Boton derecho */
                 ; 0000 00AB                if(b_der == 0) {
0000c0 99b3      	SBIC 0x16,3
0000c1 c002      	RJMP _0x22
                 ; 0000 00AC                    b_der_a = 0;
0000c2 94e8      	CLT
0000c3 c001      	RJMP _0x46
                 ; 0000 00AD                } else {
                 _0x22:
                 ; 0000 00AE                    b_der_a = 1;
0000c4 9468      	SET
                 _0x46:
0000c5 f827      	BLD  R2,7
                 ; 0000 00AF                }
                 ; 0000 00B0                if((b_der_p == 1) && (b_der_a == 0))// Cambio de flanco de 1 a 0
0000c6 fe26      	SBRS R2,6
0000c7 c002      	RJMP _0x25
0000c8 fe27      	SBRS R2,7
0000c9 c001      	RJMP _0x26
                 _0x25:
0000ca c004      	RJMP _0x24
                 _0x26:
                 ; 0000 00B1                {
                 ; 0000 00B2                    // Guardamos un 1 para la izquierda
                 ; 0000 00B3                    memory[i] = INST_DER;
0000cb d046      	RCALL SUBOPT_0x1
0000cc e0e4      	LDI  R30,LOW(4)
0000cd d04c      	RCALL SUBOPT_0x3
                 ; 0000 00B4                    i++;
                 ; 0000 00B5                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
0000ce d04d      	RCALL SUBOPT_0x4
                 ; 0000 00B6                }
                 ; 0000 00B7                b_der_p=b_der_a;
                 _0x24:
0000cf fa27      	BST  R2,7
0000d0 f826      	BLD  R2,6
                 ; 0000 00B8 
                 ; 0000 00B9                if (i == MEM_SIZE) {
0000d1 e0ea      	LDI  R30,LOW(10)
0000d2 e0f0      	LDI  R31,HIGH(10)
0000d3 17e0      	CP   R30,R16
0000d4 07f1      	CPC  R31,R17
0000d5 f419      	BRNE _0x27
                 ; 0000 00BA                    completed = 1;
0000d6 9468      	SET
0000d7 f8f0      	BLD  R15,0
                 ; 0000 00BB                    PORTC.0 = 0;
0000d8 98a8      	CBI  0x15,0
                 ; 0000 00BC                }
                 ; 0000 00BD             }
                 _0x27:
0000d9 cfb1      	RJMP _0x10
                 _0x12:
                 ; 0000 00BE 
                 ; 0000 00BF         }
                 ; 0000 00C0         b_clr_and_save_p=b_clr_and_save_a;
                 _0x8:
0000da fa21      	BST  R2,1
0000db f820      	BLD  R2,0
                 ; 0000 00C1 
                 ; 0000 00C2         /* Empezar */
                 ; 0000 00C3         if(b_start == 0) {
0000dc 99b1      	SBIC 0x16,1
0000dd c002      	RJMP _0x2A
                 ; 0000 00C4             b_start_a = 0;
0000de 94e8      	CLT
0000df c001      	RJMP _0x47
                 ; 0000 00C5          } else {
                 _0x2A:
                 ; 0000 00C6             b_start_a = 1;
0000e0 9468      	SET
                 _0x47:
0000e1 f823      	BLD  R2,3
                 ; 0000 00C7          }
                 ; 0000 00C8          if ((b_start_p==1)&&(b_start_a==0)) {
0000e2 fe22      	SBRS R2,2
0000e3 c002      	RJMP _0x2D
0000e4 fe23      	SBRS R2,3
0000e5 c001      	RJMP _0x2E
                 _0x2D:
0000e6 c024      	RJMP _0x2C
                 _0x2E:
                 ; 0000 00C9             PORTC.1 = 1;
0000e7 9aa9      	SBI  0x15,1
                 ; 0000 00CA             for (i = 0 ; i < MEM_SIZE; i++) {
0000e8 d026      	RCALL SUBOPT_0x0
                 _0x32:
                +
0000e9 300a     +CPI R16 , LOW ( 10 )
0000ea e0e0     +LDI R30 , HIGH ( 10 )
0000eb 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0000ec f4dc      	BRGE _0x33
                 ; 0000 00CB                 PORTA = memory[i];
0000ed d024      	RCALL SUBOPT_0x1
0000ee d030      	RCALL __EEPROMRDB
0000ef bbeb      	OUT  0x1B,R30
                 ; 0000 00CC                 if(b_stop == 0) {
0000f0 99b2      	SBIC 0x16,2
0000f1 c002      	RJMP _0x34
                 ; 0000 00CD                     b_stop_a = 0;
0000f2 94e8      	CLT
0000f3 c001      	RJMP _0x48
                 ; 0000 00CE                 } else {
                 _0x34:
                 ; 0000 00CF                     b_stop_a = 1;
0000f4 9468      	SET
                 _0x48:
0000f5 f825      	BLD  R2,5
                 ; 0000 00D0                 }
                 ; 0000 00D1                 if (((b_stop_p==1) && (b_stop_a==1)) || ((b_stop_p==0) && (b_stop_a==1)) || ((b_stop_p==1) && (b_stop_a= ...
0000f6 fe24      	SBRS R2,4
0000f7 c002      	RJMP _0x37
0000f8 fc25      	SBRC R2,5
0000f9 c009      	RJMP _0x39
                 _0x37:
0000fa fc24      	SBRC R2,4
0000fb c002      	RJMP _0x3A
0000fc fc25      	SBRC R2,5
0000fd c005      	RJMP _0x39
                 _0x3A:
0000fe fe24      	SBRS R2,4
0000ff c002      	RJMP _0x3C
000100 fe25      	SBRS R2,5
000101 c001      	RJMP _0x39
                 _0x3C:
000102 c001      	RJMP _0x36
                 _0x39:
                 ; 0000 00D2                     break;
000103 c004      	RJMP _0x33
                 ; 0000 00D3                 }
                 ; 0000 00D4                 b_stop_p=b_stop_a;
                 _0x36:
000104 fa25      	BST  R2,5
000105 f824      	BLD  R2,4
                 ; 0000 00D5             }
000106 d010      	RCALL SUBOPT_0x2
000107 cfe1      	RJMP _0x32
                 _0x33:
                 ; 0000 00D6             PORTA = 0;
000108 e0e0      	LDI  R30,LOW(0)
000109 bbeb      	OUT  0x1B,R30
                 ; 0000 00D7             PORTC.1 = 0;
00010a 98a9      	CBI  0x15,1
                 ; 0000 00D8         }
                 ; 0000 00D9         b_start_p=b_start_a;
                 _0x2C:
00010b fa23      	BST  R2,3
00010c f822      	BLD  R2,2
                 ; 0000 00DA 
                 ; 0000 00DB 
                 ; 0000 00DC     }
00010d cf64      	RJMP _0x3
                 ; 0000 00DD }
                 _0x41:
00010e cfff      	RJMP _0x41
                 ; .FEND
                 ;
                 ;/*
                 ;void send_data(int instr) {
                 ;    if (instr == INST_ARR) {
                 ;        if (flag_contador_arr == 0) {
                 ;            if (contador_arr < 150) {
                 ;                contador_arr++;
                 ;                PORTA.0 = 1;
                 ;            } else {
                 ;                flag_contador_arr = 1;
                 ;                contador_arr = 150;
                 ;            }
                 ;        } else {
                 ;            if (contador_arr > 0) {
                 ;                contador_arr--;
                 ;                PORTA.0 = 0;
                 ;            } else {
                 ;                flag_contador_arr = 0;
                 ;                contador_arr = 0;
                 ;            }
                 ;        }
                 ;    } else if (instr == INST_ABJ) {
                 ;        if (flag_contador_abj == 0) {
                 ;            if (contador_abj < 60) {
                 ;                contador_abj++;
                 ;                PORTA.0 = 1;
                 ;            } else {
                 ;                flag_contador_abj = 1;
                 ;                contador_abj = 60;
                 ;            }
                 ;        } else {
                 ;            if (contador_abj > 0) {
                 ;                contador_abj--;
                 ;                PORTA.0 = 0;
                 ;            } else {
                 ;                flag_contador_abj = 0;
                 ;                contador_abj = 0;
                 ;            }
                 ;        }
                 ;    } else if (instr == INST_ARR) {
                 ;        if (flag_contador_izq == 0) {
                 ;            if (contador_izq < 15) {
                 ;                contador_izq++;
                 ;                PORTA.0 = 1;
                 ;            } else {
                 ;                flag_contador_izq = 1;
                 ;                contador_izq = 15;
                 ;            }
                 ;        } else {
                 ;            if (contador_izq > 0) {
                 ;                contador_izq--;
                 ;                PORTA.0 = 0;
                 ;            } else {
                 ;                flag_contador_izq = 0;
                 ;                contador_izq = 0;
                 ;            }
                 ;        }
                 ;    } else if (instr == INST_DER) {
                 ;        if (flag_contador_der == 0) {
                 ;            if (contador_der < 1) {
                 ;                contador_der++;
                 ;                PORTA.0 = 1;
                 ;            } else {
                 ;                flag_contador_der = 1;
                 ;                contador_der = 1;
                 ;            }
                 ;        } else {
                 ;            if (contador_der > 0) {
                 ;                contador_der--;
                 ;                PORTA.0 = 0;
                 ;            } else {
                 ;                flag_contador_der = 0;
                 ;                contador_der = 0;
                 ;            }
                 ;        }
                 ;    } else {
                 ;        PORTA.4 = 0;
                 ;    }
                 ;}
                 ;*/
                 
                 	.ESEG
                 _memory:
000000           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
00010f e000     +LDI R16 , LOW ( 0 )
000110 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000111 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000112 e0a0      	LDI  R26,LOW(_memory)
000113 e0b0      	LDI  R27,HIGH(_memory)
000114 0fa0      	ADD  R26,R16
000115 1fb1      	ADC  R27,R17
000116 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
                +
000117 5f0f     +SUBI R16 , LOW ( - 1 )
000118 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000119 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00011a d010      	RCALL __EEPROMWRB
00011b cffb      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
00011c e2a8      	LDI  R26,LOW(40)
00011d e0b0      	LDI  R27,0
00011e c01d      	RJMP _delay_ms
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __EEPROMRDB:
00011f 99e1      	SBIC EECR,EEWE
000120 cffe      	RJMP __EEPROMRDB
000121 93ff      	PUSH R31
000122 b7ff      	IN   R31,SREG
000123 94f8      	CLI
000124 bbae      	OUT  EEARL,R26
000125 bbbf      	OUT  EEARH,R27
000126 9ae0      	SBI  EECR,EERE
000127 b3ed      	IN   R30,EEDR
000128 bfff      	OUT  SREG,R31
000129 91ff      	POP  R31
00012a 9508      	RET
                 
                 __EEPROMWRB:
00012b 9be1      	SBIS EECR,EEWE
00012c c002      	RJMP __EEPROMWRB1
00012d 95a8      	WDR
00012e cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00012f b79f      	IN   R25,SREG
000130 94f8      	CLI
000131 bbae      	OUT  EEARL,R26
000132 bbbf      	OUT  EEARH,R27
000133 9ae0      	SBI  EECR,EERE
000134 b38d      	IN   R24,EEDR
000135 17e8      	CP   R30,R24
000136 f019      	BREQ __EEPROMWRB0
000137 bbed      	OUT  EEDR,R30
000138 9ae2      	SBI  EECR,EEMWE
000139 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
00013a bf9f      	OUT  SREG,R25
00013b 9508      	RET
                 
                 _delay_ms:
00013c 9610      	adiw r26,0
00013d f039      	breq __delay_ms1
                 __delay_ms0:
00013e 95a8      	wdr
                +
00013f ee8e     +LDI R24 , LOW ( 0x2EE )
000140 e092     +LDI R25 , HIGH ( 0x2EE )
                +__DELAY_USW_LOOP :
000141 9701     +SBIW R24 , 1
000142 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x2EE
000143 9711      	sbiw r26,1
000144 f7c9      	brne __delay_ms0
                 __delay_ms1:
000145 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535L register use summary:
r0 :   4 r1 :   1 r2 :  24 r3 :  15 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:   6 r17:   6 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  11 r25:   5 r26:  10 r27:   7 r28:   1 r29:   1 r30:  73 r31:   9 
x  :   3 y  :   0 z  :   7 
Registers used: 18 out of 35 (51.4%)

ATmega8535L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :  16 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   7 cbi   :   2 
cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 clr   :   3 
cls   :   0 clt   :   8 clv   :   0 clz   :   0 com   :   0 cp    :   2 
cpc   :   3 cpi   :   2 cpse  :   0 dec   :   1 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 
inc   :   0 ld    :   0 ldd   :   0 ldi   :  38 lds   :   0 lpm   :   7 
lsl   :   0 lsr   :   0 mov   :   0 movw  :   3 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  49 
pop   :   1 push  :   1 rcall :  23 ret   :   6 reti  :   0 rjmp  :  74 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 sbi   :   6 sbic  :   8 
sbis  :   1 sbiw  :   5 sbr   :   0 sbrc  :   4 sbrs  :  15 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   8 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   3 std   :   0 
sts   :   0 sub   :   0 subi  :   1 swap  :   0 tst   :   0 wdr   :   2 

Instructions used: 37 out of 114 (32.5%)

ATmega8535L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00028c    642     10    652    8192   8.0%
[.dseg] 0x000060 0x0000e0      0      0      0     512   0.0%
[.eseg] 0x000000 0x00000a      0     10     10     512   2.0%

Assembly complete, 0 errors, 0 warnings
