;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;/*void send_data(int);*/
;
;#define b_clr_and_save PINB.0
;bit b_clr_and_save_p;
;bit b_clr_and_save_a;
;
;#define b_start PINB.1
;bit b_start_p;
;bit b_start_a;
;
;#define b_stop PINB.2
;bit b_stop_p;
;bit b_stop_a;
;
;#define MEM_SIZE 10
;#define INST_ARR 1
;#define INST_ABJ 2
;#define INST_IZQ 3
;#define INST_DER 4
;eeprom char memory[MEM_SIZE];
;
;#define b_der PINB.3
;bit b_der_p;
;bit b_der_a;
;
;#define b_izq PINB.4
;bit b_izq_p;
;bit b_izq_a;
;
;#define b_arr PINB.5
;bit b_arr_p;
;bit b_arr_a;
;
;#define b_abj PINB.6
;bit b_abj_p;
;bit b_abj_a;
;
;void main(void)
; 0000 002A {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 002B     int i = 0;
; 0000 002C     bit completed = 0;
; 0000 002D     /*
; 0000 002E     bit flag_contador_arr = 0;
; 0000 002F     unsigned long contador_arr = 0;
; 0000 0030     bit flag_contador_abj = 0;
; 0000 0031     unsigned long contador_abj = 0;
; 0000 0032     bit flag_contador_izq = 0;
; 0000 0033     unsigned long contador_izq = 0;
; 0000 0034     bit flag_contador_der = 0;
; 0000 0035     unsigned long contador_der = 0;*/
; 0000 0036 
; 0000 0037 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;	i -> R16,R17
;	completed -> R15.0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0038 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0039 
; 0000 003A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003C 
; 0000 003D DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003F 
; 0000 0040 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0041 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0042 
; 0000 0043 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0044 TCNT0=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0045 OCR0=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0046 
; 0000 0047 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0048 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0049 TCNT1H=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004A TCNT1L=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 004B ICR1H=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004C ICR1L=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 004D OCR1AH=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 004E OCR1AL=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004F OCR1BH=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0050 OCR1BL=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0051 
; 0000 0052 ASSR=0<<AS2;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0053 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0054 TCNT2=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0055 OCR2=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0056 
; 0000 0057 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0058 
; 0000 0059 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 005A MCUCSR=(0<<ISC2);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005B 
; 0000 005C UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005D 
; 0000 005E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005F SFIOR=(0<<ACME);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0060 
; 0000 0061 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0062 
; 0000 0063 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0064 
; 0000 0065 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0066 
; 0000 0067     while (1)
;PCODE: $00000055 VOL: 0
; 0000 0068     {
; 0000 0069         // Se borran las instrucciones y se guardan una por una las nuevas
; 0000 006A          if(b_clr_and_save == 0) {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 006B              b_clr_and_save_a = 0;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 006C          } else {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 006D              b_clr_and_save_a = 1;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 006E          }
;PCODE: $00000061 VOL: 0
; 0000 006F          if((b_clr_and_save_p == 1) && (b_clr_and_save_a == 0)) {// Cambio de flanco de 1 a 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0070             // Borrado
; 0000 0071 
; 0000 0072             for (i = 0; i < MEM_SIZE; i++) {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0073                 memory[i] = 0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0074             }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0075             // Nuevas Instrucciones
; 0000 0076             PORTC.0 = 1;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0077             completed = 0;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0078             i = 0;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0079 
; 0000 007A             while (!completed) {
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007B                /* Boton arriba */
; 0000 007C                if(b_arr == 0) {
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 007D                    b_arr_a = 0;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 007E                } else {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 007F                    b_arr_a = 1;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0080                }
;PCODE: $00000094 VOL: 0
; 0000 0081                if((b_arr_p == 1) && (b_arr_a == 0))// Cambio de flanco de 1 a 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0082                {
; 0000 0083                    // Guardamos un 1 para la izquierda
; 0000 0084                    memory[i] = INST_ARR;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0085                    i++;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0086                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0087                }
; 0000 0088                b_arr_p=b_arr_a;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0089 
; 0000 008A                /* Boton abajo */
; 0000 008B                if(b_abj == 0) {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 008C                    b_abj_a = 0;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 008D                } else {
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 008E                    b_abj_a = 1;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 008F                }
;PCODE: $000000B8 VOL: 0
; 0000 0090                if((b_abj_p == 1) && (b_abj_a == 0))// Cambio de flanco de 1 a 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0091                {
; 0000 0092                    // Guardamos un 1 para la izquierda
; 0000 0093                    memory[i] = INST_ABJ;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0094                    i++;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0095                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0096                }
; 0000 0097                b_abj_p=b_abj_a;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0098 
; 0000 0099 
; 0000 009A                /* Boton izquierdo */
; 0000 009B                if(b_izq == 0) {
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 009C                    b_izq_a = 0;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 009D                } else {
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 009E                    b_izq_a = 1;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 009F                }
;PCODE: $000000DC VOL: 0
; 0000 00A0                if((b_izq_p == 1) && (b_izq_a == 0))// Cambio de flanco de 1 a 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00A1                {
; 0000 00A2                    // Guardamos un 3 para la izquierda
; 0000 00A3                    memory[i] = INST_IZQ;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00A4                    i++;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00A5                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00A6                }
; 0000 00A7                b_izq_p=b_izq_a;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00A8 
; 0000 00A9 
; 0000 00AA                 /* Boton derecho */
; 0000 00AB                if(b_der == 0) {
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00AC                    b_der_a = 0;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00AD                } else {
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00AE                    b_der_a = 1;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00AF                }
;PCODE: $00000100 VOL: 0
; 0000 00B0                if((b_der_p == 1) && (b_der_a == 0))// Cambio de flanco de 1 a 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00B1                {
; 0000 00B2                    // Guardamos un 1 para la izquierda
; 0000 00B3                    memory[i] = INST_DER;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00B4                    i++;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00B5                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00B6                }
; 0000 00B7                b_der_p=b_der_a;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00B8 
; 0000 00B9                if (i == MEM_SIZE) {
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00BA                    completed = 1;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00BB                    PORTC.0 = 0;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00BC                }
; 0000 00BD             }
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00BE 
; 0000 00BF         }
; 0000 00C0         b_clr_and_save_p=b_clr_and_save_a;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00C1 
; 0000 00C2         /* Empezar */
; 0000 00C3         if(b_start == 0) {
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00C4             b_start_a = 0;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00C5          } else {
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00C6             b_start_a = 1;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00C7          }
;PCODE: $00000134 VOL: 0
; 0000 00C8          if ((b_start_p==1)&&(b_start_a==0)) {
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00C9             PORTC.1 = 1;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00CA             for (i = 0 ; i < MEM_SIZE; i++) {
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00CB                 PORTA = memory[i];
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00CC                 if(b_stop == 0) {
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00CD                     b_stop_a = 0;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00CE                 } else {
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00CF                     b_stop_a = 1;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00D0                 }
;PCODE: $00000159 VOL: 0
; 0000 00D1                 if (((b_stop_p==1) && (b_stop_a==1)) || ((b_stop_p==0) && (b_stop_a==1)) || ((b_stop_p==1) && (b_stop_a= ...
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00D2                     break;
;PCODE: $00000174 VOL: 0
; 0000 00D3                 }
; 0000 00D4                 b_stop_p=b_stop_a;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00D5             }
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00D6             PORTA = 0;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00D7             PORTC.1 = 0;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00D8         }
; 0000 00D9         b_start_p=b_start_a;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00DA 
; 0000 00DB 
; 0000 00DC     }
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00DD }
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;
;/*
;void send_data(int instr) {
;    if (instr == INST_ARR) {
;        if (flag_contador_arr == 0) {
;            if (contador_arr < 150) {
;                contador_arr++;
;                PORTA.0 = 1;
;            } else {
;                flag_contador_arr = 1;
;                contador_arr = 150;
;            }
;        } else {
;            if (contador_arr > 0) {
;                contador_arr--;
;                PORTA.0 = 0;
;            } else {
;                flag_contador_arr = 0;
;                contador_arr = 0;
;            }
;        }
;    } else if (instr == INST_ABJ) {
;        if (flag_contador_abj == 0) {
;            if (contador_abj < 60) {
;                contador_abj++;
;                PORTA.0 = 1;
;            } else {
;                flag_contador_abj = 1;
;                contador_abj = 60;
;            }
;        } else {
;            if (contador_abj > 0) {
;                contador_abj--;
;                PORTA.0 = 0;
;            } else {
;                flag_contador_abj = 0;
;                contador_abj = 0;
;            }
;        }
;    } else if (instr == INST_ARR) {
;        if (flag_contador_izq == 0) {
;            if (contador_izq < 15) {
;                contador_izq++;
;                PORTA.0 = 1;
;            } else {
;                flag_contador_izq = 1;
;                contador_izq = 15;
;            }
;        } else {
;            if (contador_izq > 0) {
;                contador_izq--;
;                PORTA.0 = 0;
;            } else {
;                flag_contador_izq = 0;
;                contador_izq = 0;
;            }
;        }
;    } else if (instr == INST_DER) {
;        if (flag_contador_der == 0) {
;            if (contador_der < 1) {
;                contador_der++;
;                PORTA.0 = 1;
;            } else {
;                flag_contador_der = 1;
;                contador_der = 1;
;            }
;        } else {
;            if (contador_der > 0) {
;                contador_der--;
;                PORTA.0 = 0;
;            } else {
;                flag_contador_der = 0;
;                contador_der = 0;
;            }
;        }
;    } else {
;        PORTA.4 = 0;
;    }
;}
;*/
