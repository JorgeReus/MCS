
AVRASM ver. 2.1.30  D:\Escritorio\MCS\practices\proyecto2\emisor\Debug\List\proyecto2.asm Sun Mar 24 19:56:47 2019

                 
                 
                 ;CodeVisionAVR C Compiler V3.34 Evaluation
                 ;(C) Copyright 1998-2018 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535L
                 ;Program type           : Application
                 ;Clock frequency        : 3.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c023      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000015 0000      	.DW  0x0000
                 
                 _0x40:
000016 0000
000017 0000
000018 0000
000019 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00001a 0000
00001b 0000
00001c 0000
00001d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00001e 0000
00001f 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000020 0002      	.DW  0x02
000021 0002      	.DW  0x02
000022 002a      	.DW  __REG_BIT_VARS*2
                 
                 _0xFFFFFFFF:
000023 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000024 94f8      	CLI
000025 27ee      	CLR  R30
000026 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000027 e0f1      	LDI  R31,1
000028 bffb      	OUT  GICR,R31
000029 bfeb      	OUT  GICR,R30
00002a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00002b e08d      	LDI  R24,(14-2)+1
00002c e0a2      	LDI  R26,2
00002d 27bb      	CLR  R27
                 __CLEAR_REG:
00002e 93ed      	ST   X+,R30
00002f 958a      	DEC  R24
000030 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000031 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000032 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000033 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000034 93ed      	ST   X+,R30
000035 9701      	SBIW R24,1
000036 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000037 e4e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000038 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000039 9185      	LPM  R24,Z+
00003a 9195      	LPM  R25,Z+
00003b 9700      	SBIW R24,0
00003c f061      	BREQ __GLOBAL_INI_END
00003d 91a5      	LPM  R26,Z+
00003e 91b5      	LPM  R27,Z+
00003f 9005      	LPM  R0,Z+
000040 9015      	LPM  R1,Z+
000041 01bf      	MOVW R22,R30
000042 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000043 9005      	LPM  R0,Z+
000044 920d      	ST   X+,R0
000045 9701      	SBIW R24,1
000046 f7e1      	BRNE __GLOBAL_INI_LOOP
000047 01fb      	MOVW R30,R22
000048 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000049 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004a bfed      	OUT  SPL,R30
00004b e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004d eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004e e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004f c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 ;#include <mega8535.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;void send_data(int);
                 ;
                 ;#define b_clr_and_save PINB.0
                 ;bit b_clr_and_save_p;
                 ;bit b_clr_and_save_a;
                 ;
                 ;#define b_start PINB.1
                 ;bit b_start_p;
                 ;bit b_start_a;
                 ;
                 ;#define b_stop PINB.2
                 ;bit b_stop_p;
                 ;bit b_stop_a;
                 ;
                 ;#define MEM_SIZE 10
                 ;#define INST_ARR 1
                 ;#define INST_ABJ 2
                 ;#define INST_IZQ 3
                 ;#define INST_DER 4
                 ;eeprom char memory[MEM_SIZE];
                 ;
                 ;#define b_der PINB.3
                 ;bit b_der_p;
                 ;bit b_der_a;
                 ;
                 ;#define b_izq PINB.4
                 ;bit b_izq_p;
                 ;bit b_izq_a;
                 ;
                 ;#define b_arr PINB.5
                 ;bit b_arr_p;
                 ;bit b_arr_a;
                 ;
                 ;#define b_abj PINB.6
                 ;bit b_abj_p;
                 ;bit b_abj_a;
                 ;
                 ;void main(void)
                 ; 0000 002A {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002B     int i = 0;
                 ; 0000 002C     bit completed = 0;
                 ; 0000 002D DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
                 ;	i -> R16,R17
                 ;	completed -> R15.0
000050 24ff      	CLR  R15
000051 d19d      	RCALL SUBOPT_0x0
000052 efef      	LDI  R30,LOW(255)
000053 bbea      	OUT  0x1A,R30
                 ; 0000 002E PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000054 e0e0      	LDI  R30,LOW(0)
000055 bbeb      	OUT  0x1B,R30
                 ; 0000 002F 
                 ; 0000 0030 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000056 bbe7      	OUT  0x17,R30
                 ; 0000 0031 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000057 bbe8      	OUT  0x18,R30
                 ; 0000 0032 
                 ; 0000 0033 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000058 efef      	LDI  R30,LOW(255)
000059 bbe4      	OUT  0x14,R30
                 ; 0000 0034 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00005a e0e0      	LDI  R30,LOW(0)
00005b bbe5      	OUT  0x15,R30
                 ; 0000 0035 
                 ; 0000 0036 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
00005c efef      	LDI  R30,LOW(255)
00005d bbe1      	OUT  0x11,R30
                 ; 0000 0037 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00005e e0e0      	LDI  R30,LOW(0)
00005f bbe2      	OUT  0x12,R30
                 ; 0000 0038 
                 ; 0000 0039 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000060 bfe3      	OUT  0x33,R30
                 ; 0000 003A TCNT0=0x00;
000061 bfe2      	OUT  0x32,R30
                 ; 0000 003B OCR0=0x00;
000062 bfec      	OUT  0x3C,R30
                 ; 0000 003C 
                 ; 0000 003D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000063 bdef      	OUT  0x2F,R30
                 ; 0000 003E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000064 bdee      	OUT  0x2E,R30
                 ; 0000 003F TCNT1H=0x00;
000065 bded      	OUT  0x2D,R30
                 ; 0000 0040 TCNT1L=0x00;
000066 bdec      	OUT  0x2C,R30
                 ; 0000 0041 ICR1H=0x00;
000067 bde7      	OUT  0x27,R30
                 ; 0000 0042 ICR1L=0x00;
000068 bde6      	OUT  0x26,R30
                 ; 0000 0043 OCR1AH=0x00;
000069 bdeb      	OUT  0x2B,R30
                 ; 0000 0044 OCR1AL=0x00;
00006a bdea      	OUT  0x2A,R30
                 ; 0000 0045 OCR1BH=0x00;
00006b bde9      	OUT  0x29,R30
                 ; 0000 0046 OCR1BL=0x00;
00006c bde8      	OUT  0x28,R30
                 ; 0000 0047 
                 ; 0000 0048 ASSR=0<<AS2;
00006d bde2      	OUT  0x22,R30
                 ; 0000 0049 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00006e bde5      	OUT  0x25,R30
                 ; 0000 004A TCNT2=0x00;
00006f bde4      	OUT  0x24,R30
                 ; 0000 004B OCR2=0x00;
000070 bde3      	OUT  0x23,R30
                 ; 0000 004C 
                 ; 0000 004D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000071 bfe9      	OUT  0x39,R30
                 ; 0000 004E 
                 ; 0000 004F MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000072 bfe5      	OUT  0x35,R30
                 ; 0000 0050 MCUCSR=(0<<ISC2);
000073 bfe4      	OUT  0x34,R30
                 ; 0000 0051 
                 ; 0000 0052 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000074 b9ea      	OUT  0xA,R30
                 ; 0000 0053 
                 ; 0000 0054 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000075 e8e0      	LDI  R30,LOW(128)
000076 b9e8      	OUT  0x8,R30
                 ; 0000 0055 SFIOR=(0<<ACME);
000077 e0e0      	LDI  R30,LOW(0)
000078 bfe0      	OUT  0x30,R30
                 ; 0000 0056 
                 ; 0000 0057 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000079 b9e6      	OUT  0x6,R30
                 ; 0000 0058 
                 ; 0000 0059 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00007a b9ed      	OUT  0xD,R30
                 ; 0000 005A 
                 ; 0000 005B TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00007b bfe6      	OUT  0x36,R30
                 ; 0000 005C 
                 ; 0000 005D     while (1)
                 _0x3:
                 ; 0000 005E     {
                 ; 0000 005F         // Se borran las instrucciones y se guardan una por una las nuevas
                 ; 0000 0060          if(b_clr_and_save == 0) {
00007c 99b0      	SBIC 0x16,0
00007d c002      	RJMP _0x6
                 ; 0000 0061              b_clr_and_save_a = 0;
00007e 94e8      	CLT
00007f c001      	RJMP _0x76
                 ; 0000 0062          } else {
                 _0x6:
                 ; 0000 0063              b_clr_and_save_a = 1;
000080 9468      	SET
                 _0x76:
000081 f821      	BLD  R2,1
                 ; 0000 0064          }
                 ; 0000 0065          if((b_clr_and_save_p == 1) && (b_clr_and_save_a == 0)) {// Cambio de flanco de 1 a 0
000082 fe20      	SBRS R2,0
000083 c002      	RJMP _0x9
000084 fe21      	SBRS R2,1
000085 c001      	RJMP _0xA
                 _0x9:
000086 c05c      	RJMP _0x8
                 _0xA:
                 ; 0000 0066             // Borrado
                 ; 0000 0067 
                 ; 0000 0068             for (i = 0; i < MEM_SIZE; i++) {
000087 d167      	RCALL SUBOPT_0x0
                 _0xC:
                +
000088 300a     +CPI R16 , LOW ( 10 )
000089 e0e0     +LDI R30 , HIGH ( 10 )
00008a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00008b f42c      	BRGE _0xD
                 ; 0000 0069                 memory[i] = 0;
00008c d165      	RCALL SUBOPT_0x1
00008d e0e0      	LDI  R30,LOW(0)
00008e d1d6      	RCALL __EEPROMWRB
                 ; 0000 006A             }
00008f d167      	RCALL SUBOPT_0x2
000090 cff7      	RJMP _0xC
                 _0xD:
                 ; 0000 006B             // Nuevas Instrucciones
                 ; 0000 006C             PORTC.0 = 1;
000091 9aa8      	SBI  0x15,0
                 ; 0000 006D             completed = 0;
000092 94e8      	CLT
000093 f8f0      	BLD  R15,0
                 ; 0000 006E             i = 0;
000094 d15a      	RCALL SUBOPT_0x0
                 ; 0000 006F 
                 ; 0000 0070             while (!completed) {
                 _0x10:
000095 fcf0      	SBRC R15,0
000096 c04c      	RJMP _0x12
                 ; 0000 0071                /* Boton arriba */
                 ; 0000 0072                if(b_arr == 0) {
000097 99b5      	SBIC 0x16,5
000098 c002      	RJMP _0x13
                 ; 0000 0073                    b_arr_a = 0;
000099 94e8      	CLT
00009a c001      	RJMP _0x77
                 ; 0000 0074                } else {
                 _0x13:
                 ; 0000 0075                    b_arr_a = 1;
00009b 9468      	SET
                 _0x77:
00009c f833      	BLD  R3,3
                 ; 0000 0076                }
                 ; 0000 0077                if((b_arr_p == 1) && (b_arr_a == 0))// Cambio de flanco de 1 a 0
00009d fe32      	SBRS R3,2
00009e c002      	RJMP _0x16
00009f fe33      	SBRS R3,3
0000a0 c001      	RJMP _0x17
                 _0x16:
0000a1 c004      	RJMP _0x15
                 _0x17:
                 ; 0000 0078                {
                 ; 0000 0079                    // Guardamos un 1 para la izquierda
                 ; 0000 007A                    memory[i] = INST_ARR;
0000a2 d14f      	RCALL SUBOPT_0x1
0000a3 e0e1      	LDI  R30,LOW(1)
0000a4 d155      	RCALL SUBOPT_0x3
                 ; 0000 007B                    i++;
                 ; 0000 007C                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
0000a5 d156      	RCALL SUBOPT_0x4
                 ; 0000 007D                }
                 ; 0000 007E                b_arr_p=b_arr_a;
                 _0x15:
0000a6 fa33      	BST  R3,3
0000a7 f832      	BLD  R3,2
                 ; 0000 007F 
                 ; 0000 0080                /* Boton abajo */
                 ; 0000 0081                if(b_abj == 0) {
0000a8 99b6      	SBIC 0x16,6
0000a9 c002      	RJMP _0x18
                 ; 0000 0082                    b_abj_a = 0;
0000aa 94e8      	CLT
0000ab c001      	RJMP _0x78
                 ; 0000 0083                } else {
                 _0x18:
                 ; 0000 0084                    b_abj_a = 1;
0000ac 9468      	SET
                 _0x78:
0000ad f835      	BLD  R3,5
                 ; 0000 0085                }
                 ; 0000 0086                if((b_abj_p == 1) && (b_abj_a == 0))// Cambio de flanco de 1 a 0
0000ae fe34      	SBRS R3,4
0000af c002      	RJMP _0x1B
0000b0 fe35      	SBRS R3,5
0000b1 c001      	RJMP _0x1C
                 _0x1B:
0000b2 c004      	RJMP _0x1A
                 _0x1C:
                 ; 0000 0087                {
                 ; 0000 0088                    // Guardamos un 1 para la izquierda
                 ; 0000 0089                    memory[i] = INST_ABJ;
0000b3 d13e      	RCALL SUBOPT_0x1
0000b4 e0e2      	LDI  R30,LOW(2)
0000b5 d144      	RCALL SUBOPT_0x3
                 ; 0000 008A                    i++;
                 ; 0000 008B                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
0000b6 d145      	RCALL SUBOPT_0x4
                 ; 0000 008C                }
                 ; 0000 008D                b_abj_p=b_abj_a;
                 _0x1A:
0000b7 fa35      	BST  R3,5
0000b8 f834      	BLD  R3,4
                 ; 0000 008E 
                 ; 0000 008F 
                 ; 0000 0090                /* Boton izquierdo */
                 ; 0000 0091                if(b_izq == 0) {
0000b9 99b4      	SBIC 0x16,4
0000ba c002      	RJMP _0x1D
                 ; 0000 0092                    b_izq_a = 0;
0000bb 94e8      	CLT
0000bc c001      	RJMP _0x79
                 ; 0000 0093                } else {
                 _0x1D:
                 ; 0000 0094                    b_izq_a = 1;
0000bd 9468      	SET
                 _0x79:
0000be f831      	BLD  R3,1
                 ; 0000 0095                }
                 ; 0000 0096                if((b_izq_p == 1) && (b_izq_a == 0))// Cambio de flanco de 1 a 0
0000bf fe30      	SBRS R3,0
0000c0 c002      	RJMP _0x20
0000c1 fe31      	SBRS R3,1
0000c2 c001      	RJMP _0x21
                 _0x20:
0000c3 c004      	RJMP _0x1F
                 _0x21:
                 ; 0000 0097                {
                 ; 0000 0098                    // Guardamos un 3 para la izquierda
                 ; 0000 0099                    memory[i] = INST_IZQ;
0000c4 d12d      	RCALL SUBOPT_0x1
0000c5 e0e3      	LDI  R30,LOW(3)
0000c6 d133      	RCALL SUBOPT_0x3
                 ; 0000 009A                    i++;
                 ; 0000 009B                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
0000c7 d134      	RCALL SUBOPT_0x4
                 ; 0000 009C                }
                 ; 0000 009D                b_izq_p=b_izq_a;
                 _0x1F:
0000c8 fa31      	BST  R3,1
0000c9 f830      	BLD  R3,0
                 ; 0000 009E 
                 ; 0000 009F 
                 ; 0000 00A0                 /* Boton derecho */
                 ; 0000 00A1                if(b_der == 0) {
0000ca 99b3      	SBIC 0x16,3
0000cb c002      	RJMP _0x22
                 ; 0000 00A2                    b_der_a = 0;
0000cc 94e8      	CLT
0000cd c001      	RJMP _0x7A
                 ; 0000 00A3                } else {
                 _0x22:
                 ; 0000 00A4                    b_der_a = 1;
0000ce 9468      	SET
                 _0x7A:
0000cf f827      	BLD  R2,7
                 ; 0000 00A5                }
                 ; 0000 00A6                if((b_der_p == 1) && (b_der_a == 0))// Cambio de flanco de 1 a 0
0000d0 fe26      	SBRS R2,6
0000d1 c002      	RJMP _0x25
0000d2 fe27      	SBRS R2,7
0000d3 c001      	RJMP _0x26
                 _0x25:
0000d4 c004      	RJMP _0x24
                 _0x26:
                 ; 0000 00A7                {
                 ; 0000 00A8                    // Guardamos un 1 para la izquierda
                 ; 0000 00A9                    memory[i] = INST_DER;
0000d5 d11c      	RCALL SUBOPT_0x1
0000d6 e0e4      	LDI  R30,LOW(4)
0000d7 d122      	RCALL SUBOPT_0x3
                 ; 0000 00AA                    i++;
                 ; 0000 00AB                    delay_ms(40); //Se coloca retardo de 40 ms para eliminar rebotes
0000d8 d123      	RCALL SUBOPT_0x4
                 ; 0000 00AC                }
                 ; 0000 00AD                b_der_p=b_der_a;
                 _0x24:
0000d9 fa27      	BST  R2,7
0000da f826      	BLD  R2,6
                 ; 0000 00AE 
                 ; 0000 00AF                if (i == MEM_SIZE) {
0000db e0ea      	LDI  R30,LOW(10)
0000dc e0f0      	LDI  R31,HIGH(10)
0000dd d121      	RCALL SUBOPT_0x5
0000de f419      	BRNE _0x27
                 ; 0000 00B0                    completed = 1;
0000df 9468      	SET
0000e0 f8f0      	BLD  R15,0
                 ; 0000 00B1                    PORTC.0 = 0;
0000e1 98a8      	CBI  0x15,0
                 ; 0000 00B2                }
                 ; 0000 00B3             }
                 _0x27:
0000e2 cfb2      	RJMP _0x10
                 _0x12:
                 ; 0000 00B4 
                 ; 0000 00B5         }
                 ; 0000 00B6         delay_ms(40);
                 _0x8:
0000e3 d118      	RCALL SUBOPT_0x4
                 ; 0000 00B7         b_clr_and_save_p=b_clr_and_save_a;
0000e4 fa21      	BST  R2,1
0000e5 f820      	BLD  R2,0
                 ; 0000 00B8 
                 ; 0000 00B9         /* Empezar */
                 ; 0000 00BA         if(b_start == 0) {
0000e6 99b1      	SBIC 0x16,1
0000e7 c002      	RJMP _0x2A
                 ; 0000 00BB             b_start_a = 0;
0000e8 94e8      	CLT
0000e9 c001      	RJMP _0x7B
                 ; 0000 00BC          } else {
                 _0x2A:
                 ; 0000 00BD             b_start_a = 1;
0000ea 9468      	SET
                 _0x7B:
0000eb f823      	BLD  R2,3
                 ; 0000 00BE          }
                 ; 0000 00BF          if ((b_start_p==1)&&(b_start_a==0)) {
0000ec fe22      	SBRS R2,2
0000ed c002      	RJMP _0x2D
0000ee fe23      	SBRS R2,3
0000ef c001      	RJMP _0x2E
                 _0x2D:
0000f0 c023      	RJMP _0x2C
                 _0x2E:
                 ; 0000 00C0             PORTC.1 = 1;
0000f1 9aa9      	SBI  0x15,1
                 ; 0000 00C1             for (i = 0 ; i < MEM_SIZE; i++) {
0000f2 d0fc      	RCALL SUBOPT_0x0
                 _0x32:
                +
0000f3 300a     +CPI R16 , LOW ( 10 )
0000f4 e0e0     +LDI R30 , HIGH ( 10 )
0000f5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0000f6 f4cc      	BRGE _0x33
                 ; 0000 00C2                 send_data(memory[i]);
0000f7 d0fa      	RCALL SUBOPT_0x1
0000f8 d160      	RCALL __EEPROMRDB
0000f9 e0f0      	LDI  R31,0
0000fa 01df      	MOVW R26,R30
0000fb d01c      	RCALL _send_data
                 ; 0000 00C3                 if(b_stop == 0) {
0000fc 99b2      	SBIC 0x16,2
0000fd c002      	RJMP _0x34
                 ; 0000 00C4                     b_stop_a = 0;
0000fe 94e8      	CLT
0000ff c001      	RJMP _0x7C
                 ; 0000 00C5                 } else {
                 _0x34:
                 ; 0000 00C6                     b_stop_a = 1;
000100 9468      	SET
                 _0x7C:
000101 f825      	BLD  R2,5
                 ; 0000 00C7                 }
                 ; 0000 00C8                 if (((b_stop_p==1) && (b_stop_a==1)) || ((b_stop_p==0) && (b_stop_a==1)) ) {
000102 fe24      	SBRS R2,4
000103 c002      	RJMP _0x37
000104 fc25      	SBRC R2,5
000105 c005      	RJMP _0x39
                 _0x37:
000106 fc24      	SBRC R2,4
000107 c002      	RJMP _0x3A
000108 fc25      	SBRC R2,5
000109 c001      	RJMP _0x39
                 _0x3A:
00010a c001      	RJMP _0x36
                 _0x39:
                 ; 0000 00C9                     break;
00010b c004      	RJMP _0x33
                 ; 0000 00CA                 }
                 ; 0000 00CB                 b_stop_p=b_stop_a;
                 _0x36:
00010c fa25      	BST  R2,5
00010d f824      	BLD  R2,4
                 ; 0000 00CC             }
00010e d0e8      	RCALL SUBOPT_0x2
00010f cfe3      	RJMP _0x32
                 _0x33:
                 ; 0000 00CD             PORTA = 0;
000110 e0e0      	LDI  R30,LOW(0)
000111 bbeb      	OUT  0x1B,R30
                 ; 0000 00CE             PORTC.1 = 0;
000112 98a9      	CBI  0x15,1
                 ; 0000 00CF             delay_ms(40);
000113 d0e8      	RCALL SUBOPT_0x4
                 ; 0000 00D0         }
                 ; 0000 00D1         b_start_p=b_start_a;
                 _0x2C:
000114 fa23      	BST  R2,3
000115 f822      	BLD  R2,2
                 ; 0000 00D2     }
000116 cf65      	RJMP _0x3
                 ; 0000 00D3 }
                 _0x3F:
000117 cfff      	RJMP _0x3F
                 ; .FEND
                 ;
                 ;
                 ;void send_data(int instr) {
                 ; 0000 00D6 void send_data(int instr) {
                 _send_data:
                 ; .FSTART _send_data
000118 92ff      	PUSH R15
                 ; 0000 00D7     bit flag_contador_arr = 0;
                 ; 0000 00D8     unsigned long contador_arr = 0;
                 ; 0000 00D9     bit flag_contador_abj = 0;
                 ; 0000 00DA     unsigned long contador_abj = 0;
                 ; 0000 00DB     bit flag_contador_izq = 0;
                 ; 0000 00DC     unsigned long contador_izq = 0;
                 ; 0000 00DD     bit flag_contador_der = 0;
                 ; 0000 00DE     unsigned long contador_der = 0;
                 ; 0000 00DF     unsigned long contador = 0;
                 ; 0000 00E0     while (contador < 10000) {
000119 9764      	SBIW R28,20
00011a e184      	LDI  R24,20
                +
00011b e060     +LDI R22 , LOW ( 0 )
00011c e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
00011d e2ec      	LDI  R30,LOW(_0x40*2)
00011e e0f0      	LDI  R31,HIGH(_0x40*2)
00011f d12d      	RCALL __INITLOCB
000120 d126      	RCALL __SAVELOCR2
000121 018d      	MOVW R16,R26
                 ;	instr -> R16,R17
                 ;	flag_contador_arr -> R15.0
                 ;	contador_arr -> Y+18
                 ;	flag_contador_abj -> R15.1
                 ;	contador_abj -> Y+14
                 ;	flag_contador_izq -> R15.2
                 ;	contador_izq -> Y+10
                 ;	flag_contador_der -> R15.3
                 ;	contador_der -> Y+6
                 ;	contador -> Y+2
000122 24ff      	CLR  R15
                 _0x41:
                +
000123 81aa     +LDD R26 , Y + 2
000124 81bb     +LDD R27 , Y + 2 + 1
000125 818c     +LDD R24 , Y + 2 + 2
000126 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
000127 31a0     +CPI R26 , LOW ( 0x2710 )
000128 e2e7     +LDI R30 , HIGH ( 0x2710 )
000129 07be     +CPC R27 , R30
00012a e0e0     +LDI R30 , BYTE3 ( 0x2710 )
00012b 078e     +CPC R24 , R30
00012c e0e0     +LDI R30 , BYTE4 ( 0x2710 )
00012d 079e     +CPC R25 , R30
                 	__CPD2N 0x2710
00012e f008      	BRLO PC+2
00012f c0bb      	RJMP _0x43
                 ; 0000 00E1         if (instr == INST_ARR) {
000130 e0e1      	LDI  R30,LOW(1)
000131 e0f0      	LDI  R31,HIGH(1)
000132 d0cc      	RCALL SUBOPT_0x5
000133 f541      	BRNE _0x44
                 ; 0000 00E2             if (flag_contador_arr == 0) {
000134 fcf0      	SBRC R15,0
000135 c016      	RJMP _0x45
                 ; 0000 00E3                 if (contador_arr < 150) {
000136 d0cb      	RCALL SUBOPT_0x6
                +
000137 39a6     +CPI R26 , LOW ( 0x96 )
000138 e0e0     +LDI R30 , HIGH ( 0x96 )
000139 07be     +CPC R27 , R30
00013a e0e0     +LDI R30 , BYTE3 ( 0x96 )
00013b 078e     +CPC R24 , R30
00013c e0e0     +LDI R30 , BYTE4 ( 0x96 )
00013d 079e     +CPC R25 , R30
                 	__CPD2N 0x96
00013e f428      	BRSH _0x46
                 ; 0000 00E4                     contador_arr++;
00013f d0c7      	RCALL SUBOPT_0x7
000140 d0cb      	RCALL SUBOPT_0x8
000141 d0cf      	RCALL SUBOPT_0x9
                 ; 0000 00E5                     PORTA.0 = 1;
000142 9ad8      	SBI  0x1B,0
                 ; 0000 00E6                 } else {
000143 c007      	RJMP _0x49
                 _0x46:
                 ; 0000 00E7                     flag_contador_arr = 1;
000144 9468      	SET
000145 f8f0      	BLD  R15,0
                 ; 0000 00E8                     contador_arr = 150;
                +
000146 e9e6     +LDI R30 , LOW ( 0x96 )
000147 e0f0     +LDI R31 , HIGH ( 0x96 )
000148 e060     +LDI R22 , BYTE3 ( 0x96 )
000149 e070     +LDI R23 , BYTE4 ( 0x96 )
                 	__GETD1N 0x96
00014a d0c6      	RCALL SUBOPT_0x9
                 ; 0000 00E9                 }
                 _0x49:
                 ; 0000 00EA             } else {
00014b c00f      	RJMP _0x4A
                 _0x45:
                 ; 0000 00EB                 if (contador_arr > 0) {
00014c d0b5      	RCALL SUBOPT_0x6
00014d d128      	RCALL __CPD02
00014e f428      	BRSH _0x4B
                 ; 0000 00EC                     contador_arr--;
00014f d0b7      	RCALL SUBOPT_0x7
000150 d0c5      	RCALL SUBOPT_0xA
000151 d0bf      	RCALL SUBOPT_0x9
                 ; 0000 00ED                     PORTA.0 = 0;
000152 98d8      	CBI  0x1B,0
                 ; 0000 00EE                 } else {
000153 c007      	RJMP _0x4E
                 _0x4B:
                 ; 0000 00EF                     flag_contador_arr = 0;
000154 94e8      	CLT
000155 f8f0      	BLD  R15,0
                 ; 0000 00F0                     contador_arr = 0;
000156 e0e0      	LDI  R30,LOW(0)
                +
000157 8bea     +STD Y + 18 , R30
000158 8beb     +STD Y + 18 + 1 , R30
000159 8bec     +STD Y + 18 + 2 , R30
00015a 8bed     +STD Y + 18 + 3 , R30
                 	__CLRD1S 18
                 ; 0000 00F1                 }
                 _0x4E:
                 ; 0000 00F2             }
                 _0x4A:
                 ; 0000 00F3         } else if (instr == INST_ABJ) {
00015b c085      	RJMP _0x4F
                 _0x44:
00015c e0e2      	LDI  R30,LOW(2)
00015d e0f0      	LDI  R31,HIGH(2)
00015e d0a0      	RCALL SUBOPT_0x5
00015f f541      	BRNE _0x50
                 ; 0000 00F4             if (flag_contador_abj == 0) {
000160 fcf1      	SBRC R15,1
000161 c016      	RJMP _0x51
                 ; 0000 00F5                 if (contador_abj < 60) {
000162 d0b7      	RCALL SUBOPT_0xB
                +
000163 33ac     +CPI R26 , LOW ( 0x3C )
000164 e0e0     +LDI R30 , HIGH ( 0x3C )
000165 07be     +CPC R27 , R30
000166 e0e0     +LDI R30 , BYTE3 ( 0x3C )
000167 078e     +CPC R24 , R30
000168 e0e0     +LDI R30 , BYTE4 ( 0x3C )
000169 079e     +CPC R25 , R30
                 	__CPD2N 0x3C
00016a f428      	BRSH _0x52
                 ; 0000 00F6                     contador_abj++;
00016b d0b3      	RCALL SUBOPT_0xC
00016c d09f      	RCALL SUBOPT_0x8
00016d d0b6      	RCALL SUBOPT_0xD
                 ; 0000 00F7                     PORTA.0 = 1;
00016e 9ad8      	SBI  0x1B,0
                 ; 0000 00F8                 } else {
00016f c007      	RJMP _0x55
                 _0x52:
                 ; 0000 00F9                     flag_contador_abj = 1;
000170 9468      	SET
000171 f8f1      	BLD  R15,1
                 ; 0000 00FA                     contador_abj = 60;
                +
000172 e3ec     +LDI R30 , LOW ( 0x3C )
000173 e0f0     +LDI R31 , HIGH ( 0x3C )
000174 e060     +LDI R22 , BYTE3 ( 0x3C )
000175 e070     +LDI R23 , BYTE4 ( 0x3C )
                 	__GETD1N 0x3C
000176 d0ad      	RCALL SUBOPT_0xD
                 ; 0000 00FB                 }
                 _0x55:
                 ; 0000 00FC             } else {
000177 c00f      	RJMP _0x56
                 _0x51:
                 ; 0000 00FD                 if (contador_abj > 0) {
000178 d0a1      	RCALL SUBOPT_0xB
000179 d0fc      	RCALL __CPD02
00017a f428      	BRSH _0x57
                 ; 0000 00FE                     contador_abj--;
00017b d0a3      	RCALL SUBOPT_0xC
00017c d099      	RCALL SUBOPT_0xA
00017d d0a6      	RCALL SUBOPT_0xD
                 ; 0000 00FF                     PORTA.0 = 0;
00017e 98d8      	CBI  0x1B,0
                 ; 0000 0100                 } else {
00017f c007      	RJMP _0x5A
                 _0x57:
                 ; 0000 0101                     flag_contador_abj = 0;
000180 94e8      	CLT
000181 f8f1      	BLD  R15,1
                 ; 0000 0102                     contador_abj = 0;
000182 e0e0      	LDI  R30,LOW(0)
                +
000183 87ee     +STD Y + 14 , R30
000184 87ef     +STD Y + 14 + 1 , R30
000185 8be8     +STD Y + 14 + 2 , R30
000186 8be9     +STD Y + 14 + 3 , R30
                 	__CLRD1S 14
                 ; 0000 0103                 }
                 _0x5A:
                 ; 0000 0104             }
                 _0x56:
                 ; 0000 0105         } else if (instr == INST_IZQ) {
000187 c059      	RJMP _0x5B
                 _0x50:
000188 e0e3      	LDI  R30,LOW(3)
000189 e0f0      	LDI  R31,HIGH(3)
00018a d074      	RCALL SUBOPT_0x5
00018b f541      	BRNE _0x5C
                 ; 0000 0106             if (flag_contador_izq == 0) {
00018c fcf2      	SBRC R15,2
00018d c016      	RJMP _0x5D
                 ; 0000 0107                 if (contador_izq < 15) {
00018e d09a      	RCALL SUBOPT_0xE
                +
00018f 30af     +CPI R26 , LOW ( 0xF )
000190 e0e0     +LDI R30 , HIGH ( 0xF )
000191 07be     +CPC R27 , R30
000192 e0e0     +LDI R30 , BYTE3 ( 0xF )
000193 078e     +CPC R24 , R30
000194 e0e0     +LDI R30 , BYTE4 ( 0xF )
000195 079e     +CPC R25 , R30
                 	__CPD2N 0xF
000196 f428      	BRSH _0x5E
                 ; 0000 0108                     contador_izq++;
000197 d096      	RCALL SUBOPT_0xF
000198 d073      	RCALL SUBOPT_0x8
000199 d099      	RCALL SUBOPT_0x10
                 ; 0000 0109                     PORTA.0 = 1;
00019a 9ad8      	SBI  0x1B,0
                 ; 0000 010A                 } else {
00019b c007      	RJMP _0x61
                 _0x5E:
                 ; 0000 010B                     flag_contador_izq = 1;
00019c 9468      	SET
00019d f8f2      	BLD  R15,2
                 ; 0000 010C                     contador_izq = 15;
                +
00019e e0ef     +LDI R30 , LOW ( 0xF )
00019f e0f0     +LDI R31 , HIGH ( 0xF )
0001a0 e060     +LDI R22 , BYTE3 ( 0xF )
0001a1 e070     +LDI R23 , BYTE4 ( 0xF )
                 	__GETD1N 0xF
0001a2 d090      	RCALL SUBOPT_0x10
                 ; 0000 010D                 }
                 _0x61:
                 ; 0000 010E             } else {
0001a3 c00f      	RJMP _0x62
                 _0x5D:
                 ; 0000 010F                 if (contador_izq > 0) {
0001a4 d084      	RCALL SUBOPT_0xE
0001a5 d0d0      	RCALL __CPD02
0001a6 f428      	BRSH _0x63
                 ; 0000 0110                     contador_izq--;
0001a7 d086      	RCALL SUBOPT_0xF
0001a8 d06d      	RCALL SUBOPT_0xA
0001a9 d089      	RCALL SUBOPT_0x10
                 ; 0000 0111                     PORTA.0 = 0;
0001aa 98d8      	CBI  0x1B,0
                 ; 0000 0112                 } else {
0001ab c007      	RJMP _0x66
                 _0x63:
                 ; 0000 0113                     flag_contador_izq = 0;
0001ac 94e8      	CLT
0001ad f8f2      	BLD  R15,2
                 ; 0000 0114                     contador_izq = 0;
0001ae e0e0      	LDI  R30,LOW(0)
                +
0001af 87ea     +STD Y + 10 , R30
0001b0 87eb     +STD Y + 10 + 1 , R30
0001b1 87ec     +STD Y + 10 + 2 , R30
0001b2 87ed     +STD Y + 10 + 3 , R30
                 	__CLRD1S 10
                 ; 0000 0115                 }
                 _0x66:
                 ; 0000 0116             }
                 _0x62:
                 ; 0000 0117         } else if (instr == INST_DER) {
0001b3 c02d      	RJMP _0x67
                 _0x5C:
0001b4 e0e4      	LDI  R30,LOW(4)
0001b5 e0f0      	LDI  R31,HIGH(4)
0001b6 d048      	RCALL SUBOPT_0x5
0001b7 f541      	BRNE _0x68
                 ; 0000 0118             if (flag_contador_der == 0) {
0001b8 fcf3      	SBRC R15,3
0001b9 c016      	RJMP _0x69
                 ; 0000 0119                 if (contador_der < 1) {
0001ba d07d      	RCALL SUBOPT_0x11
                +
0001bb 30a1     +CPI R26 , LOW ( 0x1 )
0001bc e0e0     +LDI R30 , HIGH ( 0x1 )
0001bd 07be     +CPC R27 , R30
0001be e0e0     +LDI R30 , BYTE3 ( 0x1 )
0001bf 078e     +CPC R24 , R30
0001c0 e0e0     +LDI R30 , BYTE4 ( 0x1 )
0001c1 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0001c2 f428      	BRSH _0x6A
                 ; 0000 011A                     contador_der++;
0001c3 d079      	RCALL SUBOPT_0x12
0001c4 d047      	RCALL SUBOPT_0x8
0001c5 d07c      	RCALL SUBOPT_0x13
                 ; 0000 011B                     PORTA.0 = 1;
0001c6 9ad8      	SBI  0x1B,0
                 ; 0000 011C                 } else {
0001c7 c007      	RJMP _0x6D
                 _0x6A:
                 ; 0000 011D                     flag_contador_der = 1;
0001c8 9468      	SET
0001c9 f8f3      	BLD  R15,3
                 ; 0000 011E                     contador_der = 1;
                +
0001ca e0e1     +LDI R30 , LOW ( 0x1 )
0001cb e0f0     +LDI R31 , HIGH ( 0x1 )
0001cc e060     +LDI R22 , BYTE3 ( 0x1 )
0001cd e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
0001ce d073      	RCALL SUBOPT_0x13
                 ; 0000 011F                 }
                 _0x6D:
                 ; 0000 0120             } else {
0001cf c00f      	RJMP _0x6E
                 _0x69:
                 ; 0000 0121                 if (contador_der > 0) {
0001d0 d067      	RCALL SUBOPT_0x11
0001d1 d0a4      	RCALL __CPD02
0001d2 f428      	BRSH _0x6F
                 ; 0000 0122                     contador_der--;
0001d3 d069      	RCALL SUBOPT_0x12
0001d4 d041      	RCALL SUBOPT_0xA
0001d5 d06c      	RCALL SUBOPT_0x13
                 ; 0000 0123                     PORTA.0 = 0;
0001d6 98d8      	CBI  0x1B,0
                 ; 0000 0124                 } else {
0001d7 c007      	RJMP _0x72
                 _0x6F:
                 ; 0000 0125                     flag_contador_der = 0;
0001d8 94e8      	CLT
0001d9 f8f3      	BLD  R15,3
                 ; 0000 0126                     contador_der = 0;
0001da e0e0      	LDI  R30,LOW(0)
                +
0001db 83ee     +STD Y + 6 , R30
0001dc 83ef     +STD Y + 6 + 1 , R30
0001dd 87e8     +STD Y + 6 + 2 , R30
0001de 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
                 ; 0000 0127                 }
                 _0x72:
                 ; 0000 0128             }
                 _0x6E:
                 ; 0000 0129         } else {
0001df c001      	RJMP _0x73
                 _0x68:
                 ; 0000 012A             PORTA.4 = 0;
0001e0 98dc      	CBI  0x1B,4
                 ; 0000 012B         }
                 _0x73:
                 _0x67:
                 _0x5B:
                 _0x4F:
                 ; 0000 012C         contador++;
                +
0001e1 81ea     +LDD R30 , Y + 2
0001e2 81fb     +LDD R31 , Y + 2 + 1
0001e3 816c     +LDD R22 , Y + 2 + 2
0001e4 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0001e5 d026      	RCALL SUBOPT_0x8
                +
0001e6 83ea     +STD Y + 2 , R30
0001e7 83fb     +STD Y + 2 + 1 , R31
0001e8 836c     +STD Y + 2 + 2 , R22
0001e9 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 012D     }
0001ea cf38      	RJMP _0x41
                 _0x43:
                 ; 0000 012E }
0001eb d05e      	RCALL __LOADLOCR2
0001ec 9666      	ADIW R28,22
0001ed 90ff      	POP  R15
0001ee 9508      	RET
                 ; .FEND
                 
                 	.ESEG
                 _memory:
000000           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
0001ef e000     +LDI R16 , LOW ( 0 )
0001f0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0001f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
0001f2 e0a0      	LDI  R26,LOW(_memory)
0001f3 e0b0      	LDI  R27,HIGH(_memory)
0001f4 0fa0      	ADD  R26,R16
0001f5 1fb1      	ADC  R27,R17
0001f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
                +
0001f7 5f0f     +SUBI R16 , LOW ( - 1 )
0001f8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001fa d06a      	RCALL __EEPROMWRB
0001fb cffb      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
0001fc e2a8      	LDI  R26,LOW(40)
0001fd e0b0      	LDI  R27,0
0001fe c07d      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0001ff 17e0      	CP   R30,R16
000200 07f1      	CPC  R31,R17
000201 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
                +
000202 89aa     +LDD R26 , Y + 18
000203 89bb     +LDD R27 , Y + 18 + 1
000204 898c     +LDD R24 , Y + 18 + 2
000205 899d     +LDD R25 , Y + 18 + 3
                 	__GETD2S 18
000206 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
                +
000207 89ea     +LDD R30 , Y + 18
000208 89fb     +LDD R31 , Y + 18 + 1
000209 896c     +LDD R22 , Y + 18 + 2
00020a 897d     +LDD R23 , Y + 18 + 3
                 	__GETD1S 18
00020b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x8:
                +
00020c 5fef     +SUBI R30 , LOW ( - 1 )
00020d 4fff     +SBCI R31 , HIGH ( - 1 )
00020e 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00020f 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
000210 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
                +
000211 8bea     +STD Y + 18 , R30
000212 8bfb     +STD Y + 18 + 1 , R31
000213 8b6c     +STD Y + 18 + 2 , R22
000214 8b7d     +STD Y + 18 + 3 , R23
                 	__PUTD1S 18
000215 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
000216 9731      	SBIW R30,1
000217 4060      	SBCI R22,0
000218 4070      	SBCI R23,0
000219 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
                +
00021a 85ae     +LDD R26 , Y + 14
00021b 85bf     +LDD R27 , Y + 14 + 1
00021c 8988     +LDD R24 , Y + 14 + 2
00021d 8999     +LDD R25 , Y + 14 + 3
                 	__GETD2S 14
00021e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
                +
00021f 85ee     +LDD R30 , Y + 14
000220 85ff     +LDD R31 , Y + 14 + 1
000221 8968     +LDD R22 , Y + 14 + 2
000222 8979     +LDD R23 , Y + 14 + 3
                 	__GETD1S 14
000223 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
                +
000224 87ee     +STD Y + 14 , R30
000225 87ff     +STD Y + 14 + 1 , R31
000226 8b68     +STD Y + 14 + 2 , R22
000227 8b79     +STD Y + 14 + 3 , R23
                 	__PUTD1S 14
000228 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
                +
000229 85aa     +LDD R26 , Y + 10
00022a 85bb     +LDD R27 , Y + 10 + 1
00022b 858c     +LDD R24 , Y + 10 + 2
00022c 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
00022d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
00022e 85ea     +LDD R30 , Y + 10
00022f 85fb     +LDD R31 , Y + 10 + 1
000230 856c     +LDD R22 , Y + 10 + 2
000231 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000232 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
                +
000233 87ea     +STD Y + 10 , R30
000234 87fb     +STD Y + 10 + 1 , R31
000235 876c     +STD Y + 10 + 2 , R22
000236 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000237 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
                +
000238 81ae     +LDD R26 , Y + 6
000239 81bf     +LDD R27 , Y + 6 + 1
00023a 8588     +LDD R24 , Y + 6 + 2
00023b 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00023c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
                +
00023d 81ee     +LDD R30 , Y + 6
00023e 81ff     +LDD R31 , Y + 6 + 1
00023f 8568     +LDD R22 , Y + 6 + 2
000240 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000241 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x13:
                +
000242 83ee     +STD Y + 6 , R30
000243 83ff     +STD Y + 6 + 1 , R31
000244 8768     +STD Y + 6 + 2 , R22
000245 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000246 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR2:
000247 931a      	ST   -Y,R17
000248 930a      	ST   -Y,R16
000249 9508      	RET
                 
                 __LOADLOCR2:
00024a 8119      	LDD  R17,Y+1
00024b 8108      	LD   R16,Y
00024c 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00024d 93af      	PUSH R26
00024e 93bf      	PUSH R27
00024f 01db      	MOVW R26,R22
000250 0fac      	ADD  R26,R28
000251 1fbd      	ADC  R27,R29
                 __INITLOC0:
000252 9005      	LPM  R0,Z+
000253 920d      	ST   X+,R0
000254 958a      	DEC  R24
000255 f7e1      	BRNE __INITLOC0
000256 91bf      	POP  R27
000257 91af      	POP  R26
000258 9508      	RET
                 
                 __EEPROMRDB:
000259 99e1      	SBIC EECR,EEWE
00025a cffe      	RJMP __EEPROMRDB
00025b 93ff      	PUSH R31
00025c b7ff      	IN   R31,SREG
00025d 94f8      	CLI
00025e bbae      	OUT  EEARL,R26
00025f bbbf      	OUT  EEARH,R27
000260 9ae0      	SBI  EECR,EERE
000261 b3ed      	IN   R30,EEDR
000262 bfff      	OUT  SREG,R31
000263 91ff      	POP  R31
000264 9508      	RET
                 
                 __EEPROMWRB:
000265 9be1      	SBIS EECR,EEWE
000266 c002      	RJMP __EEPROMWRB1
000267 95a8      	WDR
000268 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000269 b79f      	IN   R25,SREG
00026a 94f8      	CLI
00026b bbae      	OUT  EEARL,R26
00026c bbbf      	OUT  EEARH,R27
00026d 9ae0      	SBI  EECR,EERE
00026e b38d      	IN   R24,EEDR
00026f 17e8      	CP   R30,R24
000270 f019      	BREQ __EEPROMWRB0
000271 bbed      	OUT  EEDR,R30
000272 9ae2      	SBI  EECR,EEMWE
000273 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000274 bf9f      	OUT  SREG,R25
000275 9508      	RET
                 
                 __CPD02:
000276 2400      	CLR  R0
000277 160a      	CP   R0,R26
000278 060b      	CPC  R0,R27
000279 0608      	CPC  R0,R24
00027a 0609      	CPC  R0,R25
00027b 9508      	RET
                 
                 _delay_ms:
00027c 9610      	adiw r26,0
00027d f039      	breq __delay_ms1
                 __delay_ms0:
00027e 95a8      	wdr
                +
00027f ee8e     +LDI R24 , LOW ( 0x2EE )
000280 e092     +LDI R25 , HIGH ( 0x2EE )
                +__DELAY_USW_LOOP :
000281 9701     +SBIW R24 , 1
000282 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x2EE
000283 9711      	sbiw r26,1
000284 f7c9      	brne __delay_ms0
                 __delay_ms1:
000285 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535L register use summary:
r0 :  11 r1 :   1 r2 :  22 r3 :  15 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:  19 
r16:   9 r17:   8 r18:   0 r19:   0 r20:   0 r21:   0 r22:  20 r23:  17 
r24:  24 r25:  16 r26:  27 r27:  21 r28:   4 r29:   2 r30: 144 r31:  30 
x  :   4 y  :  80 z  :   8 
Registers used: 20 out of 35 (57.1%)

ATmega8535L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :  24 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  11 brpl  :   0 brsh  :   8 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   7 cbi   :   7 
cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 clr   :   5 
cls   :   0 clt   :  12 clv   :   0 clz   :   0 com   :   0 cp    :   3 
cpc   :  21 cpi   :   7 cpse  :   0 dec   :   2 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 
inc   :   0 ld    :   1 ldd   :  41 ldi   :  87 lds   :   0 lpm   :   8 
lsl   :   0 lsr   :   0 mov   :   0 movw  :   6 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  48 
pop   :   4 push  :   4 rcall :  75 ret   :  26 reti  :   0 rjmp  :  94 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   6 sbi   :  10 sbic  :   8 
sbis  :   1 sbiw  :   7 sbr   :   0 sbrc  :   8 sbrs  :  13 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :  12 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   6 std   :  36 
sts   :   0 sub   :   0 subi  :   2 swap  :   0 tst   :   0 wdr   :   2 

Instructions used: 42 out of 114 (36.8%)

ATmega8535L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00050c   1262     30   1292    8192  15.8%
[.dseg] 0x000060 0x0000e0      0      0      0     512   0.0%
[.eseg] 0x000000 0x00000a      0     10     10     512   2.0%

Assembly complete, 0 errors, 0 warnings
